//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    PBRDirectionalLight gDirLights[3];  // Offset:    0, size:   96
    float3  gEyePosW;                   // Offset:   96, size:   12
    float   gFogStart;                  // Offset:  108, size:    4
    float   gFogRange;                  // Offset:  112, size:    4
    float4  gFogColor;                  // Offset:  128, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    PBRMaterial gMaterial;              // Offset:  256, size:   32
}

//
// 6 local object(s)
//
TextureCube EnvMap;
SamplerState EnvMapSampler
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D gDiffuseMap;
Texture2D gPrefilterMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
SamplerState samPrefilter
{
    Filter   = uint(MIN_MAG_MIP_POINT /* 0 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 24 technique(s)
    //
    technique11 LUTS
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 287 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx  // vout<4,5,6>
                dp3 r1.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r1.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r1.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r2.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r2.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r2.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                mov r3.xyz, v0.xyzx  // vout<0,1,2>
                mov r3.w, l(1.000000)  // vout<3: 1f>
                
                #line 295
                mov r4.xy, v3.xyxx  // vout<13,14>
                mov o0.xyzw, r3.xyzw  // LUTVS<0,1,2,3: 1f>
                mov o1.xyz, r0.xyzx  // LUTVS<4,5,6>
                mov o2.xyz, r1.xyzx  // LUTVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r2.xyzx  // LUTVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r4.xyxx  // LUTVS<13,14>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samPrefilter                      sampler      NA          NA    0        1
                // gPrefilterMap                     texture  float4          2d    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 310 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.xy, v4.xyxx, t0.xyzw, s0
                mov r0.xy, r0.xyxx  // color<0:Inf,1:Inf>
                mov o0.xy, r0.xyxx  // LUTPSS<0:Inf,1:Inf>
                mov o0.zw, l(0,0,0,0)  // LUTPSS<2: 0f,3: 0f>
                ret 
                // Approximately 5 instruction slots used
                            
            };
        }

    }

    technique11 LUT
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[3], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 5
                
                #line 287 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx  // vout<4,5,6>
                dp3 r1.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r1.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r1.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r2.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r2.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r2.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                mov r3.xyz, v0.xyzx  // vout<0,1,2>
                mov r3.w, l(1.000000)  // vout<3: 1f>
                
                #line 295
                mov r4.xy, v3.xyxx  // vout<13,14>
                mov o0.xyzw, r3.xyzw  // LUTVS<0,1,2,3: 1f>
                mov o1.xyz, r0.xyzx  // LUTVS<4,5,6>
                mov o2.xyz, r1.xyzx  // LUTVS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r2.xyzx  // LUTVS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r4.xyxx  // LUTVS<13,14>
                ret 
                // Approximately 16 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 5
                
                #line 303 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                nop 
                mov r0.x, -v4.y
                add r0.x, r0.x, l(1.000000)  // Roughness<0>
                mov r0.y, v4.x  // NoV<0>
                
                #line 292 "Brdf.fx"
                mul r0.z, r0.y, r0.y
                mov r0.z, -r0.z
                add r0.z, r0.z, l(1.000000)
                sqrt r1.x, r0.z  // V<0:NaN>
                mov r1.y, l(0)  // V<1: 0f>
                mov r1.z, r0.y  // V<2>
                mov r0.z, l(0)  // A<0: -0f>
                
                #line 301
                mov r2.x, r0.z  // A<0:NaN:Inf>
                mov r2.y, r0.z  // B<0:NaN:Inf>
                mov r2.z, r0.z  // i<0>
                loop 
                  ult r0.w, r2.z, l(1024)
                  breakc_z r0.w
                  nop 
                  mov r0.w, r2.z  // i<0>
                
                #line 194
                  utof r1.w, r0.w
                  div r3.x, r1.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r0.w, r0.w  // i<0>
                
                #line 182
                  mov r1.w, r0.w  // i<0>
                  mov r2.w, r0.z  // uReverse<0>
                  mov r3.z, r0.z  // k<0>
                  loop 
                    ilt r3.w, r3.z, l(10)
                    breakc_z r3.w
                    ishl r3.w, r2.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r4.x, r1.w, l(1)
                    iadd r2.w, r3.w, r4.x  // uReverse<0>
                    ushr r1.w, r1.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 182
                    iadd r3.z, r3.z, l(1)  // k<0>
                  endloop 
                
                #line 188
                  utof r0.w, r2.w
                  mul r3.y, r0.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 195
                  mov r3.y, r3.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r3.x, r3.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r3.y, r3.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 303
                  mov r3.xy, r3.xyxx  // E<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                
                #line 306
                  nop 
                  mov r3.xy, r3.xyxx  // E<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r0.w, r0.x  // Roughness<0>
                
                #line 270
                  mul r1.w, r0.w, r0.w  // m<0:Inf:[0f,1.#INFf]>
                  mul r1.w, r1.w, r1.w  // m2<0:NaN:Inf>
                  mul r3.x, r3.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r3.z, -r3.y
                  add r3.z, r3.z, l(1.000000)
                  add r1.w, r1.w, l(-1.000000)
                  mul r1.w, r3.y, r1.w
                  add r1.w, r1.w, l(1.000000)
                  div r1.w, r3.z, r1.w
                  sqrt r4.z, r1.w  // CosTheta<0:NaN:Inf>
                  mul r1.w, r4.z, r4.z
                  mov r1.w, -r1.w
                  add r1.w, r1.w, l(1.000000)
                  sqrt r1.w, r1.w  // SinTheta<0:NaN>
                
                #line 278
                  sincos null, r3.y, r3.x
                  mul r4.x, r1.w, r3.y  // H<0:NaN>
                  sincos r3.x, null, r3.x
                  mul r4.y, r1.w, r3.x  // H<1:NaN>
                  mov r4.z, r4.z  // H<2:NaN:Inf>
                
                #line 286
                  mov r4.x, r4.x  // ImportanceSampleGGX<0:NaN>
                  mov r4.y, r4.y  // ImportanceSampleGGX<1:NaN>
                  mov r4.z, r4.z  // ImportanceSampleGGX<2:NaN:Inf>
                
                #line 306
                  mov r4.xyz, r4.xyzx  // H<0:NaN,1:NaN,2:NaN:Inf>
                  dp3 r1.w, r1.xyzx, r4.xyzx
                  mul r3.x, r1.w, l(2.000000)
                  mul r3.x, r4.z, r3.x
                  mov r3.y, -r1.z
                  add r3.x, r3.y, r3.x  // L<2:NaN:Inf>
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)  // NoL<0:[0f,1f]>
                  max r3.y, r4.z, l(0.000000)
                  min r3.y, r3.y, l(1.000000)  // NoH<0:[0f,1f]>
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r3.z, l(0.000000), r3.x
                  if_nz r3.z
                    nop 
                    mov r3.z, r0.y  // NoV<0>
                    mov r3.x, r3.x  // NoL<0:[0f,1f]>
                
                #line 70
                    nop 
                    mov r0.w, r0.w  // value<0>
                
                #line 37
                    mul r0.w, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                    mov r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                    mov r3.w, -r0.w
                    add r3.w, r3.w, l(1.000000)
                    mul r4.x, r3.w, r3.z
                    add r4.x, r0.w, r4.x
                    mul r4.x, r3.x, r4.x  // Vis_SmithV<0:NaN:Inf>
                    mul r3.w, r3.w, r3.x
                    add r0.w, r0.w, r3.w
                    mul r0.w, r0.w, r3.z  // Vis_SmithL<0:NaN:Inf>
                    add r0.w, r0.w, r4.x
                    rcp r0.w, r0.w
                    mul r0.w, r0.w, l(0.500000)  // Vis_SmithJointApprox<0:NaN:Inf>
                
                #line 315
                    mov r0.w, r0.w  // Vis<0:NaN:Inf>
                    nop 
                
                #line 326
                    mul r0.w, r0.w, r3.x
                    mul r3.x, r1.w, l(4.000000)
                    div r3.x, r3.x, r3.y
                    mul r0.w, r0.w, r3.x  // NoL_Vis_PDF<0:NaN:Inf>
                    mov r1.w, -r1.w
                    add r1.w, r1.w, l(1.000000)
                    mul r3.x, r1.w, l(1.000000)
                    mul r1.w, r1.w, r1.w
                    mul r1.w, r1.w, r1.w
                    mul r1.w, r1.w, r3.x  // Fc<0:[0f,1f]>
                    mov r3.x, -r1.w
                    add r3.x, r3.x, l(1.000000)
                    mul r3.x, r0.w, r3.x
                    add r2.x, r2.x, r3.x  // A<0:NaN:Inf>
                    mul r0.w, r0.w, r1.w
                    add r2.y, r0.w, r2.y  // B<0:NaN:Inf>
                
                #line 313
                  endif 
                
                #line 301
                  iadd r2.z, r2.z, l(1)  // i<0>
                endloop 
                
                #line 335
                div r0.xy, r2.xyxx, l(1024.000000, 1024.000000, 0.000000, 0.000000)  // IntegrateBRDF<0:NaN:Inf,1:NaN:Inf>
                
                #line 303 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xy, r0.xyxx  // color<0:NaN:Inf,1:NaN:Inf>
                mov o0.xy, r0.xyxx  // LUTPS<0:NaN:Inf,1:NaN:Inf>
                mov o0.zw, l(0,0,0,0)  // LUTPS<2: 0f,3: 0f>
                ret 
                // Approximately 124 instruction slots used
                            
            };
        }

    }

    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 121 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.x, r0.xyzx, r1.xyzx
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  add r2.x, r2.x, l(0.000010)
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.y, r0.w  // Roughness<0>
                  mov r2.x, r2.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.y, r2.y  // value<0>
                
                #line 37
                  mul r2.y, r2.y, r2.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.y, r2.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.z, -r2.y
                  add r2.z, r2.z, l(1.000000)
                  mul r2.w, r2.z, r2.x
                  add r2.w, r2.y, r2.w
                  mul r2.w, r1.w, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r2.z
                  add r1.w, r2.y, r1.w
                  mul r1.w, r1.w, r2.x  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r2.w
                  rcp r1.w, r1.w
                  mul r2.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 172 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.x, r0.xyzx, r1.xyzx
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  add r2.x, r2.x, l(0.000010)
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.y, r0.w  // Roughness<0>
                  mov r2.x, r2.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.y, r2.y  // value<0>
                
                #line 37
                  mul r2.y, r2.y, r2.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.y, r2.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.z, -r2.y
                  add r2.z, r2.z, l(1.000000)
                  mul r2.w, r2.z, r2.x
                  add r2.w, r2.y, r2.w
                  mul r2.w, r1.w, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r2.z
                  add r1.w, r2.y, r1.w
                  mul r1.w, r1.w, r2.x  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r2.w
                  rcp r1.w, r1.w
                  mul r2.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  mov r3.x, -r2.w
                  max r2.w, r2.w, r3.x
                  add r2.w, r2.w, l(0.000010)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r3.x, r0.w  // Roughness<0>
                  mov r2.w, r2.w  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r3.x, r3.x  // value<0>
                
                #line 37
                  mul r3.x, r3.x, r3.x  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r3.x, r3.x  // a<0:Inf:[0f,1.#INFf]>
                  mov r3.y, -r3.x
                  add r3.y, r3.y, l(1.000000)
                  mul r3.z, r2.w, r3.y
                  add r3.z, r3.x, r3.z
                  mul r3.z, r1.w, r3.z  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r3.y
                  add r1.w, r3.x, r1.w
                  mul r1.w, r1.w, r2.w  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r3.z
                  rcp r1.w, r1.w
                  mul r3.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r3.xyz, r3.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r3.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r3.xyz, r3.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r3.xyz, r3.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 223 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                nop 
                
                #line 273
                mul r0.x, cb0[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                
                #line 15 "Brdf.fx"
                nop 
                nop 
                nop 
                
                #line 279 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov o0.xyz, l(0,0,0,0)  // PS<0: 0f,1: 0f,2: 0f>
                mov o0.w, r0.x  // PS<3>
                ret 
                // Approximately 9 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 121 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.x, r0.xyzx, r1.xyzx
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  add r2.x, r2.x, l(0.000010)
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.y, r0.w  // Roughness<0>
                  mov r2.x, r2.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.y, r2.y  // value<0>
                
                #line 37
                  mul r2.y, r2.y, r2.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.y, r2.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.z, -r2.y
                  add r2.z, r2.z, l(1.000000)
                  mul r2.w, r2.z, r2.x
                  add r2.w, r2.y, r2.w
                  mul r2.w, r1.w, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r2.z
                  add r1.w, r2.y, r1.w
                  mul r1.w, r1.w, r2.x  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r2.w
                  rcp r1.w, r1.w
                  mul r2.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 172 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.x, r0.xyzx, r1.xyzx
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  add r2.x, r2.x, l(0.000010)
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.y, r0.w  // Roughness<0>
                  mov r2.x, r2.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.y, r2.y  // value<0>
                
                #line 37
                  mul r2.y, r2.y, r2.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.y, r2.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.z, -r2.y
                  add r2.z, r2.z, l(1.000000)
                  mul r2.w, r2.z, r2.x
                  add r2.w, r2.y, r2.w
                  mul r2.w, r1.w, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r2.z
                  add r1.w, r2.y, r1.w
                  mul r1.w, r1.w, r2.x  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r2.w
                  rcp r1.w, r1.w
                  mul r2.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  mov r3.x, -r2.w
                  max r2.w, r2.w, r3.x
                  add r2.w, r2.w, l(0.000010)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r3.x, r0.w  // Roughness<0>
                  mov r2.w, r2.w  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r3.x, r3.x  // value<0>
                
                #line 37
                  mul r3.x, r3.x, r3.x  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r3.x, r3.x  // a<0:Inf:[0f,1.#INFf]>
                  mov r3.y, -r3.x
                  add r3.y, r3.y, l(1.000000)
                  mul r3.z, r2.w, r3.y
                  add r3.z, r3.x, r3.z
                  mul r3.z, r1.w, r3.z  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r3.y
                  add r1.w, r3.x, r1.w
                  mul r1.w, r1.w, r2.w  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r3.z
                  rcp r1.w, r1.w
                  mul r3.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r3.xyz, r3.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r3.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r3.xyz, r3.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r3.xyz, r3.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 223 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                nop 
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r0.x, v4.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // baseColor<3:Inf>
                
                #line 227
                add r0.x, r0.x, l(-0.100000)
                lt r0.x, r0.x, l(0.000000)
                and r0.x, r0.x, l(-1)
                discard r0.x
                
                #line 273
                mul r0.x, cb0[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                
                #line 15 "Brdf.fx"
                nop 
                nop 
                nop 
                
                #line 279 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov o0.xyz, l(0,0,0,0)  // PS<0: 0f,1: 0f,2: 0f>
                mov o0.w, r0.x  // PS<3>
                ret 
                // Approximately 15 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.xyzw, s0
                mov r0.w, r0.w  // baseColor<3:Inf>
                
                #line 227
                add r0.w, r0.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 127 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.xyzw, s0
                mov r0.w, r0.w  // baseColor<3:Inf>
                
                #line 227
                add r0.w, r0.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.x, r0.xyzx, r1.xyzx
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  add r2.x, r2.x, l(0.000010)
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.y, r0.w  // Roughness<0>
                  mov r2.x, r2.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.y, r2.y  // value<0>
                
                #line 37
                  mul r2.y, r2.y, r2.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.y, r2.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.z, -r2.y
                  add r2.z, r2.z, l(1.000000)
                  mul r2.w, r2.z, r2.x
                  add r2.w, r2.y, r2.w
                  mul r2.w, r1.w, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r2.z
                  add r1.w, r2.y, r1.w
                  mul r1.w, r1.w, r2.x  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r2.w
                  rcp r1.w, r1.w
                  mul r2.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 178 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r0.w, v4.xyxx, t0.xyzw, s0
                mov r0.w, r0.w  // baseColor<3:Inf>
                
                #line 227
                add r0.w, r0.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                
                #line 253
                nop 
                mov r0.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r1.w, r2.xyzx, r2.xyzx
                rsq r1.w, r1.w
                mul r2.xyz, r1.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.w, r0.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.x, l(0.000000), r1.w
                if_nz r2.x
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.x, r0.xyzx, r1.xyzx
                  mov r2.y, -r2.x
                  max r2.x, r2.y, r2.x
                  add r2.x, r2.x, l(0.000010)
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.y, r0.w  // Roughness<0>
                  mov r2.x, r2.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.y, r2.y  // value<0>
                
                #line 37
                  mul r2.y, r2.y, r2.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.y, r2.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.z, -r2.y
                  add r2.z, r2.z, l(1.000000)
                  mul r2.w, r2.z, r2.x
                  add r2.w, r2.y, r2.w
                  mul r2.w, r1.w, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r2.z
                  add r1.w, r2.y, r1.w
                  mul r1.w, r1.w, r2.x  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r2.w
                  rcp r1.w, r1.w
                  mul r2.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  mov r3.x, -r2.w
                  max r2.w, r2.w, r3.x
                  add r2.w, r2.w, l(0.000010)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r3.x, r0.w  // Roughness<0>
                  mov r2.w, r2.w  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r3.x, r3.x  // value<0>
                
                #line 37
                  mul r3.x, r3.x, r3.x  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r3.x, r3.x  // a<0:Inf:[0f,1.#INFf]>
                  mov r3.y, -r3.x
                  add r3.y, r3.y, l(1.000000)
                  mul r3.z, r2.w, r3.y
                  add r3.z, r3.x, r3.z
                  mul r3.z, r1.w, r3.z  // Vis_SmithV<0:NaN:Inf>
                  mul r1.w, r1.w, r3.y
                  add r1.w, r3.x, r1.w
                  mul r1.w, r1.w, r2.w  // Vis_SmithL<0:NaN:Inf>
                  add r1.w, r1.w, r3.z
                  rcp r1.w, r1.w
                  mul r3.xyz, r1.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r3.xyz, r3.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r3.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r3.xyz, r3.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r3.xyz, r3.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r1.w, r3.xyzx, r3.xyzx
                rsq r1.w, r1.w
                mul r3.xyz, r1.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r1.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                
                #line 240
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r0.w, r0.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r1.w, r1.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r0.w, r0.w  // value<0>
                
                #line 37
                  mul r0.y, r0.w, r0.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r0.w, r0.z, r0.x
                  add r0.w, r0.y, r0.w
                  mul r0.w, r0.w, r1.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r1.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r0.w
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 229 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.x  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.x
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 130 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.y, r0.xyzx, r1.xyzx
                  mov r2.z, -r2.y
                  max r2.y, r2.z, r2.y
                  add r2.y, r2.y, l(0.000010)
                  max r2.y, r2.y, l(0.000000)
                  min r2.y, r2.y, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.z, r1.w  // Roughness<0>
                  mov r2.y, r2.y  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.z, r2.z  // value<0>
                
                #line 37
                  mul r2.z, r2.z, r2.z  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.z, r2.z  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.w, -r2.z
                  add r2.w, r2.w, l(1.000000)
                  mul r3.x, r2.w, r2.y
                  add r3.x, r2.z, r3.x
                  mul r3.x, r2.x, r3.x  // Vis_SmithV<0:NaN:Inf>
                  mul r2.x, r2.w, r2.x
                  add r2.x, r2.z, r2.x
                  mul r2.x, r2.x, r2.y  // Vis_SmithL<0:NaN:Inf>
                  add r2.x, r2.x, r3.x
                  rcp r2.x, r2.x
                  mul r2.xyz, r2.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 181 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.y, r0.xyzx, r1.xyzx
                  mov r2.z, -r2.y
                  max r2.y, r2.z, r2.y
                  add r2.y, r2.y, l(0.000010)
                  max r2.y, r2.y, l(0.000000)
                  min r2.y, r2.y, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.z, r1.w  // Roughness<0>
                  mov r2.y, r2.y  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.z, r2.z  // value<0>
                
                #line 37
                  mul r2.z, r2.z, r2.z  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.z, r2.z  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.w, -r2.z
                  add r2.w, r2.w, l(1.000000)
                  mul r3.x, r2.w, r2.y
                  add r3.x, r2.z, r3.x
                  mul r3.x, r2.x, r3.x  // Vis_SmithV<0:NaN:Inf>
                  mul r2.x, r2.w, r2.x
                  add r2.x, r2.z, r2.x
                  mul r2.x, r2.x, r2.y  // Vis_SmithL<0:NaN:Inf>
                  add r2.x, r2.x, r3.x
                  rcp r2.x, r2.x
                  mul r2.xyz, r2.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r3.x, r0.xyzx, r1.xyzx
                  mov r3.y, -r3.x
                  max r3.x, r3.y, r3.x
                  add r3.x, r3.x, l(0.000010)
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r3.y, r1.w  // Roughness<0>
                  mov r3.x, r3.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r3.y, r3.y  // value<0>
                
                #line 37
                  mul r3.y, r3.y, r3.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r3.y, r3.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r3.z, -r3.y
                  add r3.z, r3.z, l(1.000000)
                  mul r3.w, r3.z, r3.x
                  add r3.w, r3.y, r3.w
                  mul r3.w, r2.w, r3.w  // Vis_SmithV<0:NaN:Inf>
                  mul r2.w, r2.w, r3.z
                  add r2.w, r3.y, r2.w
                  mul r2.w, r2.w, r3.x  // Vis_SmithL<0:NaN:Inf>
                  add r2.w, r2.w, r3.w
                  rcp r2.w, r2.w
                  mul r3.xyz, r2.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r3.xyz, r3.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r3.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r3.xyz, r3.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r3.xyz, r3.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 232 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float       
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[17], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                nop 
                
                #line 206
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 266
                mov r0.y, -cb0[6].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[7].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                add r0.yzw, cb0[8].xxyz, l(0.000000, -0.000000, -0.000000, -0.000000)
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0,1,2>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0,1,2>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mov r1.y, r0.x  // lin<0:[-3.40282e+038f,0.00313067f]>
                  mul r2.x, r1.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:Inf:[-1.#INFf,0.0404483f]>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:[0.0404483f,1.19725e+016f]>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mov r1.x, r0.y  // lin<0:[-3.40282e+038f,0.00313067f]>
                  mul r2.y, r1.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:Inf:[-1.#INFf,0.0404483f]>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:[0.0404483f,1.19725e+016f]>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mov r0.y, r0.z  // lin<0:[-3.40282e+038f,0.00313067f]>
                  mul r2.z, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:Inf:[-1.#INFf,0.0404483f]>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:[0.0404483f,1.19725e+016f]>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:Inf,1:Inf,2:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:Inf,1:Inf,2:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 65 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.x  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.x
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 130 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.y, r0.xyzx, r1.xyzx
                  mov r2.z, -r2.y
                  max r2.y, r2.z, r2.y
                  add r2.y, r2.y, l(0.000010)
                  max r2.y, r2.y, l(0.000000)
                  min r2.y, r2.y, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.z, r1.w  // Roughness<0>
                  mov r2.y, r2.y  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.z, r2.z  // value<0>
                
                #line 37
                  mul r2.z, r2.z, r2.z  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.z, r2.z  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.w, -r2.z
                  add r2.w, r2.w, l(1.000000)
                  mul r3.x, r2.w, r2.y
                  add r3.x, r2.z, r3.x
                  mul r3.x, r2.x, r3.x  // Vis_SmithV<0:NaN:Inf>
                  mul r2.x, r2.w, r2.x
                  add r2.x, r2.z, r2.x
                  mul r2.x, r2.x, r2.y  // Vis_SmithL<0:NaN:Inf>
                  add r2.x, r2.x, r3.x
                  rcp r2.x, r2.x
                  mul r2.xyz, r2.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 181 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.y, r0.xyzx, r1.xyzx
                  mov r2.z, -r2.y
                  max r2.y, r2.z, r2.y
                  add r2.y, r2.y, l(0.000010)
                  max r2.y, r2.y, l(0.000000)
                  min r2.y, r2.y, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.z, r1.w  // Roughness<0>
                  mov r2.y, r2.y  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.z, r2.z  // value<0>
                
                #line 37
                  mul r2.z, r2.z, r2.z  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.z, r2.z  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.w, -r2.z
                  add r2.w, r2.w, l(1.000000)
                  mul r3.x, r2.w, r2.y
                  add r3.x, r2.z, r3.x
                  mul r3.x, r2.x, r3.x  // Vis_SmithV<0:NaN:Inf>
                  mul r2.x, r2.w, r2.x
                  add r2.x, r2.z, r2.x
                  mul r2.x, r2.x, r2.y  // Vis_SmithL<0:NaN:Inf>
                  add r2.x, r2.x, r3.x
                  rcp r2.x, r2.x
                  mul r2.xyz, r2.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r3.x, r0.xyzx, r1.xyzx
                  mov r3.y, -r3.x
                  max r3.x, r3.y, r3.x
                  add r3.x, r3.x, l(0.000010)
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r3.y, r1.w  // Roughness<0>
                  mov r3.x, r3.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r3.y, r3.y  // value<0>
                
                #line 37
                  mul r3.y, r3.y, r3.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r3.y, r3.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r3.z, -r3.y
                  add r3.z, r3.z, l(1.000000)
                  mul r3.w, r3.z, r3.x
                  add r3.w, r3.y, r3.w
                  mul r3.w, r2.w, r3.w  // Vis_SmithV<0:NaN:Inf>
                  mul r2.w, r2.w, r3.z
                  add r2.w, r3.y, r2.w
                  mul r2.w, r2.w, r3.x  // Vis_SmithL<0:NaN:Inf>
                  add r2.w, r2.w, r3.w
                  rcp r2.w, r2.w
                  mul r3.xyz, r2.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r3.xyz, r3.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r3.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r3.xyz, r3.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r3.xyz, r3.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 232 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float       
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                nop 
                
                #line 206
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r0.y, v4.xyxx, t0.xwyz, s0
                mov r0.y, r0.y  // baseColor<3:Inf>
                
                #line 227
                add r0.y, r0.y, l(-0.100000)
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard r0.y
                
                #line 266
                mov r0.y, -cb0[6].w
                add r0.x, r0.y, r0.x
                div r0.x, r0.x, cb0[7].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                add r0.yzw, cb0[8].xxyz, l(0.000000, -0.000000, -0.000000, -0.000000)
                mul r0.xyz, r0.yzwy, r0.xxxx
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0,1,2>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0,1,2>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mov r1.y, r0.x  // lin<0:[-3.40282e+038f,0.00313067f]>
                  mul r2.x, r1.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:Inf:[-1.#INFf,0.0404483f]>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:[0.0404483f,1.19725e+016f]>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mov r1.x, r0.y  // lin<0:[-3.40282e+038f,0.00313067f]>
                  mul r2.y, r1.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:Inf:[-1.#INFf,0.0404483f]>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:[0.0404483f,1.19725e+016f]>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mov r0.y, r0.z  // lin<0:[-3.40282e+038f,0.00313067f]>
                  mul r2.z, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:Inf:[-1.#INFf,0.0404483f]>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:[0.0404483f,1.19725e+016f]>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:Inf,1:Inf,2:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:Inf,1:Inf,2:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 71 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 3
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r1.w, v4.xyxx, t0.xyzw, s0
                mov r1.w, r1.w  // baseColor<3:Inf>
                
                #line 227
                add r1.w, r1.w, l(-0.100000)
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard r1.w
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.x  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.x
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 136 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r1.w, v4.xyxx, t0.xyzw, s0
                mov r1.w, r1.w  // baseColor<3:Inf>
                
                #line 227
                add r1.w, r1.w, l(-0.100000)
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard r1.w
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.y, r0.xyzx, r1.xyzx
                  mov r2.z, -r2.y
                  max r2.y, r2.z, r2.y
                  add r2.y, r2.y, l(0.000010)
                  max r2.y, r2.y, l(0.000000)
                  min r2.y, r2.y, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.z, r1.w  // Roughness<0>
                  mov r2.y, r2.y  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.z, r2.z  // value<0>
                
                #line 37
                  mul r2.z, r2.z, r2.z  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.z, r2.z  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.w, -r2.z
                  add r2.w, r2.w, l(1.000000)
                  mul r3.x, r2.w, r2.y
                  add r3.x, r2.z, r3.x
                  mul r3.x, r2.x, r3.x  // Vis_SmithV<0:NaN:Inf>
                  mul r2.x, r2.w, r2.x
                  add r2.x, r2.z, r2.x
                  mul r2.x, r2.x, r2.y  // Vis_SmithL<0:NaN:Inf>
                  add r2.x, r2.x, r3.x
                  rcp r2.x, r2.x
                  mul r2.xyz, r2.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 187 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TANGENT                  0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float   xyz 
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xyz
                dcl_input v3.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xyz
                dcl_output o4.xy
                dcl_temps 6
                
                #line 183 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[0].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[1].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[2].xyzx  // vout<9:NaN:Inf>
                dp3 r3.x, v2.xyzx, cb0[0].xyzx  // vout<10:NaN:Inf>
                dp3 r3.y, v2.xyzx, cb0[1].xyzx  // vout<11:NaN:Inf>
                dp3 r3.z, v2.xyzx, cb0[2].xyzx  // vout<12:NaN:Inf>
                dp4 r4.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r4.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r4.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 190
                mov r0.xy, v3.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r5.x, r0.xyzw, cb0[12].xyzw  // vout<13:NaN:Inf>
                dp4 r5.y, r0.xyzw, cb0[13].xyzw  // vout<14:NaN:Inf>
                mov o0.xyzw, r4.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xyz, r3.xyzx  // VS<10:NaN:Inf,11:NaN:Inf,12:NaN:Inf>
                mov o4.xy, r5.xyxx  // VS<13:NaN:Inf,14:NaN:Inf>
                ret 
                // Approximately 25 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float specular;                // Offset:  272
                //       float roughness;               // Offset:  276
                //       float metal;                   // Offset:  280
                //       float pad;                     // Offset:  284
                //
                //   } gMaterial;                       // Offset:  256 Size:    32
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TANGENT                  0   xyz         3     NONE  float       
                // TEXCOORD                 0   xy          4     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[18], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v4.xy
                dcl_output o0.xyzw
                dcl_temps 4
                
                #line 198 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 202
                nop 
                
                #line 17 "LightHelper.fx"
                mul r0.xyz, r0.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // bumpedNormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // NormalSampleToWorldSpace<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.w, r0.xyzx, r0.xyzx
                rsq r0.w, r0.w
                mul r0.xyz, r0.wwww, r0.xyzx  // NormalW<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 206
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 209
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 212
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 220
                sample_indexable(texture2d)(float,float,float,float) r1.w, v4.xyxx, t0.xyzw, s0
                mov r1.w, r1.w  // baseColor<3:Inf>
                
                #line 227
                add r1.w, r1.w, l(-0.100000)
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard r1.w
                
                #line 253
                nop 
                mov r1.w, cb1[17].y  // roughness<0>
                mov r2.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 13
                mov r2.xyz, -r2.xyzx
                dp3 r2.w, r2.xyzx, r2.xyzx
                rsq r2.w, r2.w
                mul r2.xyz, r2.wwww, r2.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.xyz, r2.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.w, r1.w  // roughness<0>
                
                #line 231 "Brdf.fx"
                dp3 r2.x, r2.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.y, l(0.000000), r2.x
                if_nz r2.y
                
                #line 240
                  max r2.x, r2.x, l(0.000000)
                  min r2.x, r2.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r2.y, r0.xyzx, r1.xyzx
                  mov r2.z, -r2.y
                  max r2.y, r2.z, r2.y
                  add r2.y, r2.y, l(0.000010)
                  max r2.y, r2.y, l(0.000000)
                  min r2.y, r2.y, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r2.z, r1.w  // Roughness<0>
                  mov r2.y, r2.y  // NoV<0:[0f,1f]>
                  mov r2.x, r2.x  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r2.z, r2.z  // value<0>
                
                #line 37
                  mul r2.z, r2.z, r2.z  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r2.z, r2.z  // a<0:Inf:[0f,1.#INFf]>
                  mov r2.w, -r2.z
                  add r2.w, r2.w, l(1.000000)
                  mul r3.x, r2.w, r2.y
                  add r3.x, r2.z, r3.x
                  mul r3.x, r2.x, r3.x  // Vis_SmithV<0:NaN:Inf>
                  mul r2.x, r2.w, r2.x
                  add r2.x, r2.z, r2.x
                  mul r2.x, r2.x, r2.y  // Vis_SmithL<0:NaN:Inf>
                  add r2.x, r2.x, r3.x
                  rcp r2.x, r2.x
                  mul r2.xyz, r2.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r2.xyz, r2.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r2.xyz, r2.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r2.xyz, r2.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r3.x, r0.xyzx, r1.xyzx
                  mov r3.y, -r3.x
                  max r3.x, r3.y, r3.x
                  add r3.x, r3.x, l(0.000010)
                  max r3.x, r3.x, l(0.000000)
                  min r3.x, r3.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r3.y, r1.w  // Roughness<0>
                  mov r3.x, r3.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r3.y, r3.y  // value<0>
                
                #line 37
                  mul r3.y, r3.y, r3.y  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r3.y, r3.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r3.z, -r3.y
                  add r3.z, r3.z, l(1.000000)
                  mul r3.w, r3.z, r3.x
                  add r3.w, r3.y, r3.w
                  mul r3.w, r2.w, r3.w  // Vis_SmithV<0:NaN:Inf>
                  mul r2.w, r2.w, r3.z
                  add r2.w, r3.y, r2.w
                  mul r2.w, r2.w, r3.x  // Vis_SmithL<0:NaN:Inf>
                  add r2.w, r2.w, r3.w
                  rcp r2.w, r2.w
                  mul r3.xyz, r2.wwww, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r3.xyz, r3.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r3.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r3.xyz, r3.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r3.xyz, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r3.xyz, r3.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r2.xyz, r2.xyzx, r3.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                nop 
                mov r3.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 13
                mov r3.xyz, -r3.xyzx
                dp3 r2.w, r3.xyzx, r3.xyzx
                rsq r2.w, r2.w
                mul r3.xyz, r2.wwww, r3.xyzx  // lightVec<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21
                nop 
                mov r3.xyz, r3.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 231 "Brdf.fx"
                dp3 r2.w, r3.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.x, l(0.000000), r2.w
                if_nz r3.x
                
                #line 240
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r0.x, r0.xyzx, r1.xyzx
                  mov r0.y, -r0.x
                  max r0.x, r0.y, r0.x
                  add r0.x, r0.x, l(0.000010)
                  max r0.x, r0.x, l(0.000000)
                  min r0.x, r0.x, l(1.000000)  // NoV<0:[0f,1f]>
                
                #line 246
                  nop 
                  nop 
                  mov r1.w, r1.w  // Roughness<0>
                  mov r0.x, r0.x  // NoV<0:[0f,1f]>
                  mov r2.w, r2.w  // NoL<0:[0f,1f]>
                
                #line 70
                  nop 
                  mov r1.w, r1.w  // value<0>
                
                #line 37
                  mul r0.y, r1.w, r1.w  // Square<0:Inf:[0f,1.#INFf]>
                
                #line 70
                  mov r0.y, r0.y  // a<0:Inf:[0f,1.#INFf]>
                  mov r0.z, -r0.y
                  add r0.z, r0.z, l(1.000000)
                  mul r1.x, r0.z, r0.x
                  add r1.x, r0.y, r1.x
                  mul r1.x, r1.x, r2.w  // Vis_SmithV<0:NaN:Inf>
                  mul r0.z, r0.z, r2.w
                  add r0.y, r0.y, r0.z
                  mul r0.x, r0.y, r0.x  // Vis_SmithL<0:NaN:Inf>
                  add r0.x, r0.x, r1.x
                  rcp r0.x, r0.x
                  mul r0.xyz, r0.xxxx, l(0.500000, 0.500000, 0.500000, 0.000000)  // Vis_SmithJointApprox<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                
                #line 247
                  mov r0.xyz, r0.xyzx  // Vis<0:NaN:Inf,0:NaN:Inf,0:NaN:Inf>
                  nop 
                
                #line 47
                  nop 
                
                #line 255
                  nop 
                  mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 232
                else 
                  mov r0.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 265
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 21 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 256
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 266
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 269
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 273
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 277
                nop 
                mov r0.xyz, r0.xyzx  // lin<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 15 "Brdf.fx"
                nop 
                mov r0.x, r0.x  // lin<0:NaN:Inf>
                
                #line 6
                lt r1.x, r0.x, l(0.003131)
                if_nz r1.x
                  mul r2.x, r0.x, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r1.x
                  log r0.x, r0.x
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.x, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.y, r0.y  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.y, l(0.003131)
                if_nz r0.x
                  mul r2.y, r0.y, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.y
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.y, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                nop 
                mov r0.z, r0.z  // lin<0:NaN:Inf>
                
                #line 6
                lt r0.x, r0.z, l(0.003131)
                if_nz r0.x
                  mul r2.z, r0.z, l(12.920000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                if_z r0.x
                  log r0.x, r0.z
                  mul r0.x, r0.x, l(0.416667)
                  exp r0.x, r0.x
                  mul r0.x, r0.x, l(1.055000)
                  add r2.z, r0.x, l(-0.055000)  // LinearToSrgbBranchingChannel<0:NaN:Inf>
                endif 
                
                #line 15
                mov r2.x, r2.x  // LinearToSrgbBranching<0:NaN:Inf>
                mov r2.y, r2.y  // LinearToSrgbBranching<1:NaN:Inf>
                mov r2.z, r2.z  // LinearToSrgbBranching<2:NaN:Inf>
                
                #line 277 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r2.xyz, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.xyz, r2.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 238 instruction slots used
                            
            };
        }

    }

}

