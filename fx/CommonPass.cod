//
// FX Version: fx_5_0
//
// 2 local buffer(s)
//
cbuffer cbPerFrame
{
    PBRDirectionalLight gDirLights[3];  // Offset:    0, size:   96
    float3  gEyePosW;                   // Offset:   96, size:   12
    float   gFogStart;                  // Offset:  108, size:    4
    float   gFogRange;                  // Offset:  112, size:    4
    float4  gFogColor;                  // Offset:  128, size:   16
}

cbuffer cbPerObject
{
    float4x4 gWorld;                    // Offset:    0, size:   64
    float4x4 gWorldInvTranspose;        // Offset:   64, size:   64
    float4x4 gWorldViewProj;            // Offset:  128, size:   64
    float4x4 gTexTransform;             // Offset:  192, size:   64
    PBRMaterial gMaterial;              // Offset:  256, size:   40
}

//
// 4 local object(s)
//
TextureCube EnvMap;
SamplerState EnvMapSampler
{
    Filter   = uint(MIN_MAG_LINEAR_MIP_POINT /* 20 */);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};
Texture2D gDiffuseMap;
SamplerState samAnisotropic
{
    Filter   = uint(ANISOTROPIC /* 85 */);
    MaxAnisotropy = uint(4);
    AddressU = uint(WRAP /* 1 */);
    AddressV = uint(WRAP /* 1 */);
};

//
// 1 groups(s)
//
fxgroup
{
    //
    // 22 technique(s)
    //
    technique11 Light1
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // EnvMap                            texture  float4        cube    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 11
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r2.xyz, r4.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r7.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r3.w, r6.xyzx, r5.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r4.w, r3.w, l(-5.554730)
                  add r4.w, r4.w, l(-6.983160)
                  mul r3.w, r3.w, r4.w  // ftimes<0:[-12.5379f,0f]>
                  mul r3.w, r3.w, l(1.000000)
                  exp r3.w, r3.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r8.xyz, -r7.xyzx
                  add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r8.xyz, r3.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r8.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r7.xyz, r7.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // roughness<0>
                
                #line 69
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r4.w, r4.w, r4.w  // a2<0:NaN:Inf>
                  dp3 r5.w, r8.xyzx, r6.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r5.w, r5.w, r5.w  // nh2<0:[0f,1f]>
                  add r6.x, r4.w, l(-1.000000)
                  mul r5.w, r5.w, r6.x
                  add r5.w, r5.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r5.w, r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, l(3.141593)
                  div r4.w, r4.w, r5.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r3.w, r3.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r8.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r3.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r3.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r8.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r3.w, r3.w, r5.y
                  div r3.w, r5.z, r3.w  // ret<0:NaN:Inf>
                  mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r3.w, r3.w  // g2<0:NaN:Inf>
                  mul r3.w, r3.w, r5.x  // ret<0:NaN:Inf>
                  mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r3.w, r3.w, r4.w
                  mul r5.xyz, r7.xyzx, r3.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r4.xyz, l(0,0,0,0)  // SpecularLighting<0: 0f,1: 0f,2: 0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r5.xyz, r4.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r3.w, r2.w, l(1024)
                  breakc_z r3.w
                  nop 
                  mov r3.w, r2.w  // i<0>
                
                #line 139
                  utof r4.w, r3.w
                  div r6.x, r4.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r3.w, r3.w  // i<0>
                
                #line 127
                  mov r4.w, r3.w  // i<0>
                  mov r5.w, r1.w  // uReverse<0>
                  mov r6.z, r1.w  // k<0>
                  loop 
                    ilt r6.w, r6.z, l(10)
                    breakc_z r6.w
                    ishl r6.w, r5.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.x, r4.w, l(1)
                    iadd r5.w, r6.w, r7.x  // uReverse<0>
                    ushr r4.w, r4.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.z, r6.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r3.w, r5.w
                  mul r6.y, r3.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r6.y, r6.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r6.x, r6.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r6.y, r6.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r3.w, r0.w  // Roughness<0>
                  mov r7.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.x, r6.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r6.z, -r6.y
                  add r6.z, r6.z, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  add r4.w, r4.w, l(-1.000000)
                  mul r4.w, r6.y, r4.w
                  add r4.w, r4.w, l(1.000000)
                  div r4.w, r6.z, r4.w
                  sqrt r4.w, r4.w  // CosTheta<0:NaN:Inf>
                  mul r6.y, r4.w, r4.w
                  mov r6.y, -r6.y
                  add r6.y, r6.y, l(1.000000)
                  sqrt r6.y, r6.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r6.z, r6.x
                  mul r6.z, r6.z, r6.y  // H<0:NaN>
                  sincos r6.x, null, r6.x
                  mul r6.x, r6.x, r6.y  // H<1:NaN>
                  mov r4.w, r4.w  // H<2:NaN:Inf>
                  mov r6.y, -r7.z
                  max r6.y, r6.y, r7.z
                  lt r6.y, r6.y, l(0.999000)
                  movc r8.xyz, r6.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r7.zxyz, r8.zxyz
                  mul r8.xyz, r7.yzxy, r8.xyzx
                  mov r8.xyz, -r8.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  dp3 r6.y, r8.xyzx, r8.xyzx
                  rsq r6.y, r6.y
                  mul r8.xyz, r6.yyyy, r8.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.yzxy, r8.zxyz
                  mul r10.xyz, r7.zxyz, r8.yzxy
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.yzw, r6.zzzz, r8.xxyz
                  mul r8.xyz, r6.xxxx, r9.xyzx
                  add r6.xyz, r6.yzwy, r8.xyzx
                  mul r8.xyz, r4.wwww, r7.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r6.xyz, r6.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r1.xyzx, r6.xyzx
                  mul r6.w, r4.w, l(2.000000)
                  mul r8.xyz, r6.xyzx, r6.wwww
                  mov r9.xyz, -r1.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r1.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r7.w, r0.xyzx, r8.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r6.x, r0.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r6.y, l(0.000000), r7.w
                  if_nz r6.y
                    sample_l_indexable(texturecube)(float,float,float,float) r9.xyz, r8.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r3.w, r3.w, l(1.000000)
                    mul r3.w, r3.w, r3.w
                    div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r7.xyz, r7.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                    dp3 r6.y, r7.xyzx, r8.xyzx
                    max r6.y, r6.y, l(0.000000)
                    min r6.y, r6.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r6.z, -r3.w
                    add r6.z, r6.z, l(1.000000)
                    mul r7.w, r6.z, r6.y
                    add r7.w, r3.w, r7.w
                    div r6.y, r6.y, r7.w  // ret<0:NaN:Inf>
                    mov r6.y, r6.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r6.y, r6.y  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r7.x, r7.xyzx, r10.xyzx
                    max r7.x, r7.x, l(0.000000)
                    min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r6.z, r6.z, r7.x
                    add r3.w, r3.w, r6.z
                    div r3.w, r7.x, r3.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r3.w, r3.w  // g2<0:NaN:Inf>
                    mul r3.w, r3.w, r6.y  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r3.w, r3.w  // G<0:NaN:Inf>
                    mov r6.y, -r4.w
                    add r6.y, r6.y, l(1.000000)
                    mul r6.z, r6.y, l(1.000000)
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.z  // Fc<0:[0f,1f]>
                    mov r6.z, -r6.y
                    add r6.z, r6.z, l(1.000000)
                    mul r7.xyz, r3.xyzx, r6.zzzz
                    add r7.xyz, r6.yyyy, r7.xyzx  // F<0,1,2>
                    mul r7.xyz, r7.xyzx, r9.xyzx
                    mul r7.xyz, r3.wwww, r7.xyzx
                    mul r7.xyz, r4.wwww, r7.xyzx
                    mul r3.w, r6.w, r6.x
                    div r6.xyz, r7.xyzx, r3.wwww
                    add r5.xyz, r5.xyzx, r6.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r5.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 282 instruction slots used
                            
            };
        }

    }

    technique11 Light2
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // EnvMap                            texture  float4        cube    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 11
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r3.w, r6.xyzx, r5.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r4.w, r3.w, l(-5.554730)
                  add r4.w, r4.w, l(-6.983160)
                  mul r3.w, r3.w, r4.w  // ftimes<0:[-12.5379f,0f]>
                  mul r3.w, r3.w, l(1.000000)
                  exp r3.w, r3.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r3.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // roughness<0>
                
                #line 69
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r4.w, r4.w, r4.w  // a2<0:NaN:Inf>
                  dp3 r5.w, r9.xyzx, r6.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r5.w, r5.w, r5.w  // nh2<0:[0f,1f]>
                  add r6.x, r4.w, l(-1.000000)
                  mul r5.w, r5.w, r6.x
                  add r5.w, r5.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r5.w, r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, l(3.141593)
                  div r4.w, r4.w, r5.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r3.w, r3.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r3.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r3.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r3.w, r3.w, r5.y
                  div r3.w, r5.z, r3.w  // ret<0:NaN:Inf>
                  mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r3.w, r3.w  // g2<0:NaN:Inf>
                  mul r3.w, r3.w, r5.x  // ret<0:NaN:Inf>
                  mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r3.w, r3.w, r4.w
                  mul r5.xyz, r8.xyzx, r3.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r3.w, r2.w, l(1024)
                  breakc_z r3.w
                  nop 
                  mov r3.w, r2.w  // i<0>
                
                #line 139
                  utof r4.w, r3.w
                  div r7.x, r4.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r3.w, r3.w  // i<0>
                
                #line 127
                  mov r4.w, r3.w  // i<0>
                  mov r5.w, r1.w  // uReverse<0>
                  mov r6.w, r1.w  // k<0>
                  loop 
                    ilt r7.z, r6.w, l(10)
                    breakc_z r7.z
                    ishl r7.z, r5.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.w, r4.w, l(1)
                    iadd r5.w, r7.z, r7.w  // uReverse<0>
                    ushr r4.w, r4.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r3.w, r5.w
                  mul r7.y, r3.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r3.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.x, -r7.y
                  add r7.x, r7.x, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  add r4.w, r4.w, l(-1.000000)
                  mul r4.w, r7.y, r4.w
                  add r4.w, r4.w, l(1.000000)
                  div r4.w, r7.x, r4.w
                  sqrt r4.w, r4.w  // CosTheta<0:NaN:Inf>
                  mul r7.x, r4.w, r4.w
                  mov r7.x, -r7.x
                  add r7.x, r7.x, l(1.000000)
                  sqrt r7.x, r7.x  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.y, r6.w
                  mul r7.y, r7.y, r7.x  // H<0:NaN>
                  sincos r6.w, null, r6.w
                  mul r6.w, r6.w, r7.x  // H<1:NaN>
                  mov r4.w, r4.w  // H<2:NaN:Inf>
                  mov r7.x, -r8.z
                  max r7.x, r7.x, r8.z
                  lt r7.x, r7.x, l(0.999000)
                  movc r7.xzw, r7.xxxx, l(1.000000,0,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r8.zxyz, r7.wxzw
                  mul r7.xzw, r8.yyzx, r7.xxzw
                  mov r7.xzw, -r7.xxzw
                  add r7.xzw, r7.xxzw, r9.xxyz
                  dp3 r8.w, r7.xzwx, r7.xzwx
                  rsq r8.w, r8.w
                  mul r7.xzw, r7.xxzw, r8.wwww  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wxzw, r8.yzxy
                  mul r10.xyz, r7.zwxz, r8.zxyz
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r7.yyyy, r7.xzwx
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  mul r9.xyz, r4.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r1.xyzx, r7.xyzx
                  mul r6.w, r4.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r6.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r1.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r7.w, r0.xyzx, r9.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r7.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r7.yzw, r9.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r3.w, r3.w, l(1.000000)
                    mul r3.w, r3.w, r3.w
                    div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                    dp3 r8.w, r8.xyzx, r9.xyzx
                    max r8.w, r8.w, l(0.000000)
                    min r8.w, r8.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r9.x, -r3.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.y, r8.w, r9.x
                    add r9.y, r3.w, r9.y
                    div r8.w, r8.w, r9.y  // ret<0:NaN:Inf>
                    mov r8.w, r8.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r8.w, r8.w  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r10.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r8.y, r9.x, r8.x
                    add r3.w, r3.w, r8.y
                    div r3.w, r8.x, r3.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r3.w, r3.w  // g2<0:NaN:Inf>
                    mul r3.w, r3.w, r8.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r3.w, r3.w  // G<0:NaN:Inf>
                    mov r8.x, -r4.w
                    add r8.x, r8.x, l(1.000000)
                    mul r8.y, r8.x, l(1.000000)
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.y  // Fc<0:[0f,1f]>
                    mov r8.y, -r8.x
                    add r8.y, r8.y, l(1.000000)
                    mul r8.yzw, r3.xxyz, r8.yyyy
                    add r8.xyz, r8.xxxx, r8.yzwy  // F<0,1,2>
                    mul r7.yzw, r7.yyzw, r8.xxyz
                    mul r7.yzw, r3.wwww, r7.yyzw
                    mul r7.yzw, r4.wwww, r7.yyzw
                    mul r3.w, r6.w, r7.x
                    div r7.xyz, r7.yzwy, r3.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.w, l(0.000000), r2.w
                if_nz r3.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r3.w, r8.xyzx, r8.xyzx
                  rsq r3.w, r3.w
                  mul r8.xyz, r3.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r0.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r8.xyzx, r7.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r4.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r4.w, r4.w, r4.w  // a2<0:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r8.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r5.w, r5.w, r5.w  // nh2<0:[0f,1f]>
                  add r6.w, r4.w, l(-1.000000)
                  mul r5.w, r5.w, r6.w
                  add r5.w, r5.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r5.w, r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, l(3.141593)
                  div r4.w, r4.w, r5.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r5.w, r0.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.x, -r5.w
                  add r7.x, r7.x, l(1.000000)
                  mul r7.y, r6.w, r7.x
                  add r7.y, r5.w, r7.y
                  div r6.w, r6.w, r7.y  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r6.w, r6.w  // g1<0:NaN:Inf>
                  nop 
                  mov r7.yzw, r1.xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.y, r8.xyzx, r7.yzwy
                  max r7.y, r7.y, l(0.000000)
                  min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.x, r7.x, r7.y
                  add r5.w, r5.w, r7.x
                  div r5.w, r7.y, r5.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r7.xyz, r9.xyzx, r4.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r3.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r3.w, r2.w, l(1024)
                  breakc_z r3.w
                  nop 
                  mov r3.w, r2.w  // i<0>
                
                #line 139
                  utof r4.w, r3.w
                  div r7.x, r4.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r3.w, r3.w  // i<0>
                
                #line 127
                  mov r4.w, r3.w  // i<0>
                  mov r5.w, r1.w  // uReverse<0>
                  mov r6.w, r1.w  // k<0>
                  loop 
                    ilt r7.z, r6.w, l(10)
                    breakc_z r7.z
                    ishl r7.z, r5.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.w, r4.w, l(1)
                    iadd r5.w, r7.z, r7.w  // uReverse<0>
                    ushr r4.w, r4.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r3.w, r5.w
                  mul r7.y, r3.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r3.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.x, -r7.y
                  add r7.x, r7.x, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  add r4.w, r4.w, l(-1.000000)
                  mul r4.w, r7.y, r4.w
                  add r4.w, r4.w, l(1.000000)
                  div r4.w, r7.x, r4.w
                  sqrt r4.w, r4.w  // CosTheta<0:NaN:Inf>
                  mul r7.x, r4.w, r4.w
                  mov r7.x, -r7.x
                  add r7.x, r7.x, l(1.000000)
                  sqrt r7.x, r7.x  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.y, r6.w
                  mul r7.y, r7.y, r7.x  // H<0:NaN>
                  sincos r6.w, null, r6.w
                  mul r6.w, r6.w, r7.x  // H<1:NaN>
                  mov r4.w, r4.w  // H<2:NaN:Inf>
                  mov r7.x, -r8.z
                  max r7.x, r7.x, r8.z
                  lt r7.x, r7.x, l(0.999000)
                  movc r7.xzw, r7.xxxx, l(1.000000,0,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r8.zxyz, r7.wxzw
                  mul r7.xzw, r8.yyzx, r7.xxzw
                  mov r7.xzw, -r7.xxzw
                  add r7.xzw, r7.xxzw, r9.xxyz
                  dp3 r8.w, r7.xzwx, r7.xzwx
                  rsq r8.w, r8.w
                  mul r7.xzw, r7.xxzw, r8.wwww  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wxzw, r8.yzxy
                  mul r10.xyz, r7.zwxz, r8.zxyz
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r7.yyyy, r7.xzwx
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  mul r9.xyz, r4.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r1.xyzx, r7.xyzx
                  mul r6.w, r4.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r6.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r1.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r7.w, r0.xyzx, r9.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r7.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r7.yzw, r9.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r3.w, r3.w, l(1.000000)
                    mul r3.w, r3.w, r3.w
                    div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                    dp3 r8.w, r8.xyzx, r9.xyzx
                    max r8.w, r8.w, l(0.000000)
                    min r8.w, r8.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r9.x, -r3.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.y, r8.w, r9.x
                    add r9.y, r3.w, r9.y
                    div r8.w, r8.w, r9.y  // ret<0:NaN:Inf>
                    mov r8.w, r8.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r8.w, r8.w  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r10.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r8.y, r9.x, r8.x
                    add r3.w, r3.w, r8.y
                    div r3.w, r8.x, r3.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r3.w, r3.w  // g2<0:NaN:Inf>
                    mul r3.w, r3.w, r8.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r3.w, r3.w  // G<0:NaN:Inf>
                    mov r8.x, -r4.w
                    add r8.x, r8.x, l(1.000000)
                    mul r8.y, r8.x, l(1.000000)
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.y  // Fc<0:[0f,1f]>
                    mov r8.y, -r8.x
                    add r8.y, r8.y, l(1.000000)
                    mul r8.yzw, r3.xxyz, r8.yyyy
                    add r8.xyz, r8.xxxx, r8.yzwy  // F<0,1,2>
                    mul r7.yzw, r7.yyzw, r8.xxyz
                    mul r7.yzw, r3.wwww, r7.yyzw
                    mul r7.yzw, r4.wwww, r7.yyzw
                    mul r3.w, r6.w, r7.x
                    div r7.xyz, r7.yzwy, r3.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 531 instruction slots used
                            
            };
        }

    }

    technique11 Light3
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // EnvMap                            texture  float4        cube    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r3.w, r6.xyzx, r5.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r4.w, r3.w, l(-5.554730)
                  add r4.w, r4.w, l(-6.983160)
                  mul r3.w, r3.w, r4.w  // ftimes<0:[-12.5379f,0f]>
                  mul r3.w, r3.w, l(1.000000)
                  exp r3.w, r3.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r3.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r3.w, r0.w  // roughness<0>
                
                #line 69
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r4.w, r4.w, r4.w  // a2<0:NaN:Inf>
                  dp3 r5.w, r9.xyzx, r6.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r5.w, r5.w, r5.w  // nh2<0:[0f,1f]>
                  add r6.x, r4.w, l(-1.000000)
                  mul r5.w, r5.w, r6.x
                  add r5.w, r5.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r5.w, r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, l(3.141593)
                  div r4.w, r4.w, r5.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r3.w, r3.w, l(1.000000)
                  mul r3.w, r3.w, r3.w
                  div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r3.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r3.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r3.w, r3.w, r5.y
                  div r3.w, r5.z, r3.w  // ret<0:NaN:Inf>
                  mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r3.w, r3.w  // g2<0:NaN:Inf>
                  mul r3.w, r3.w, r5.x  // ret<0:NaN:Inf>
                  mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r3.w, r3.w, r4.w
                  mul r5.xyz, r8.xyzx, r3.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r3.w, r2.w, l(1024)
                  breakc_z r3.w
                  nop 
                  mov r3.w, r2.w  // i<0>
                
                #line 139
                  utof r4.w, r3.w
                  div r7.x, r4.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r3.w, r3.w  // i<0>
                
                #line 127
                  mov r4.w, r3.w  // i<0>
                  mov r5.w, r1.w  // uReverse<0>
                  mov r6.w, r1.w  // k<0>
                  loop 
                    ilt r7.z, r6.w, l(10)
                    breakc_z r7.z
                    ishl r7.z, r5.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.w, r4.w, l(1)
                    iadd r5.w, r7.z, r7.w  // uReverse<0>
                    ushr r4.w, r4.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r3.w, r5.w
                  mul r7.y, r3.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r3.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.x, -r7.y
                  add r7.x, r7.x, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  add r4.w, r4.w, l(-1.000000)
                  mul r4.w, r7.y, r4.w
                  add r4.w, r4.w, l(1.000000)
                  div r4.w, r7.x, r4.w
                  sqrt r4.w, r4.w  // CosTheta<0:NaN:Inf>
                  mul r7.x, r4.w, r4.w
                  mov r7.x, -r7.x
                  add r7.x, r7.x, l(1.000000)
                  sqrt r7.x, r7.x  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.y, r6.w
                  mul r7.y, r7.y, r7.x  // H<0:NaN>
                  sincos r6.w, null, r6.w
                  mul r6.w, r6.w, r7.x  // H<1:NaN>
                  mov r4.w, r4.w  // H<2:NaN:Inf>
                  mov r7.x, -r8.z
                  max r7.x, r7.x, r8.z
                  lt r7.x, r7.x, l(0.999000)
                  movc r7.xzw, r7.xxxx, l(1.000000,0,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r8.zxyz, r7.wxzw
                  mul r7.xzw, r8.yyzx, r7.xxzw
                  mov r7.xzw, -r7.xxzw
                  add r7.xzw, r7.xxzw, r9.xxyz
                  dp3 r8.w, r7.xzwx, r7.xzwx
                  rsq r8.w, r8.w
                  mul r7.xzw, r7.xxzw, r8.wwww  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wxzw, r8.yzxy
                  mul r10.xyz, r7.zwxz, r8.zxyz
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r7.yyyy, r7.xzwx
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  mul r9.xyz, r4.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r1.xyzx, r7.xyzx
                  mul r6.w, r4.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r6.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r1.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r7.w, r0.xyzx, r9.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r7.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r7.yzw, r9.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r3.w, r3.w, l(1.000000)
                    mul r3.w, r3.w, r3.w
                    div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                    dp3 r8.w, r8.xyzx, r9.xyzx
                    max r8.w, r8.w, l(0.000000)
                    min r8.w, r8.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r9.x, -r3.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.y, r8.w, r9.x
                    add r9.y, r3.w, r9.y
                    div r8.w, r8.w, r9.y  // ret<0:NaN:Inf>
                    mov r8.w, r8.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r8.w, r8.w  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r10.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r8.y, r9.x, r8.x
                    add r3.w, r3.w, r8.y
                    div r3.w, r8.x, r3.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r3.w, r3.w  // g2<0:NaN:Inf>
                    mul r3.w, r3.w, r8.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r3.w, r3.w  // G<0:NaN:Inf>
                    mov r8.x, -r4.w
                    add r8.x, r8.x, l(1.000000)
                    mul r8.y, r8.x, l(1.000000)
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.y  // Fc<0:[0f,1f]>
                    mov r8.y, -r8.x
                    add r8.y, r8.y, l(1.000000)
                    mul r8.yzw, r3.xxyz, r8.yyyy
                    add r8.xyz, r8.xxxx, r8.yzwy  // F<0,1,2>
                    mul r7.yzw, r7.yyzw, r8.xxyz
                    mul r7.yzw, r3.wwww, r7.yyzw
                    mul r7.yzw, r4.wwww, r7.yyzw
                    mul r3.w, r6.w, r7.x
                    div r7.xyz, r7.yzwy, r3.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.w, l(0.000000), r2.w
                if_nz r3.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r3.w, r8.xyzx, r8.xyzx
                  rsq r3.w, r3.w
                  mul r8.xyz, r3.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r9.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r9.xyz, r9.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r9.xyz, r6.xyzx, r9.xyzx
                  add r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r0.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r8.xyzx, r7.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r10.xyz, -r3.xyzx
                  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r10.xyz, r4.wwww, r10.xyzx
                  add r10.xyz, r3.xyzx, r10.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r10.xyz, r10.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r10.xyz, r10.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r4.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r4.w, r4.w, r4.w  // a2<0:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r8.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r5.w, r5.w, r5.w  // nh2<0:[0f,1f]>
                  add r6.w, r4.w, l(-1.000000)
                  mul r5.w, r5.w, r6.w
                  add r5.w, r5.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r5.w, r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, l(3.141593)
                  div r4.w, r4.w, r5.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r5.w, r0.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.x, -r5.w
                  add r7.x, r7.x, l(1.000000)
                  mul r7.y, r6.w, r7.x
                  add r7.y, r5.w, r7.y
                  div r6.w, r6.w, r7.y  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r6.w, r6.w  // g1<0:NaN:Inf>
                  nop 
                  mov r7.yzw, r1.xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.y, r8.xyzx, r7.yzwy
                  max r7.y, r7.y, l(0.000000)
                  min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.x, r7.x, r7.y
                  add r5.w, r5.w, r7.x
                  div r5.w, r7.y, r5.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r7.xyz, r10.xyzx, r4.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r3.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r9.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r6.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r7.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r3.w, r2.w, l(1024)
                  breakc_z r3.w
                  nop 
                  mov r3.w, r2.w  // i<0>
                
                #line 139
                  utof r4.w, r3.w
                  div r8.x, r4.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r3.w, r3.w  // i<0>
                
                #line 127
                  mov r4.w, r3.w  // i<0>
                  mov r5.w, r1.w  // uReverse<0>
                  mov r6.w, r1.w  // k<0>
                  loop 
                    ilt r7.w, r6.w, l(10)
                    breakc_z r7.w
                    ishl r7.w, r5.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.z, r4.w, l(1)
                    iadd r5.w, r7.w, r8.z  // uReverse<0>
                    ushr r4.w, r4.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r3.w, r5.w
                  mul r8.y, r3.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r8.y, r8.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r8.x, r8.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r8.y, r8.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r3.w, r0.w  // Roughness<0>
                  mov r9.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r8.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r8.y
                  add r7.w, r7.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  add r4.w, r4.w, l(-1.000000)
                  mul r4.w, r8.y, r4.w
                  add r4.w, r4.w, l(1.000000)
                  div r4.w, r7.w, r4.w
                  sqrt r4.w, r4.w  // CosTheta<0:NaN:Inf>
                  mul r7.w, r4.w, r4.w
                  mov r7.w, -r7.w
                  add r7.w, r7.w, l(1.000000)
                  sqrt r7.w, r7.w  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r8.x, r6.w
                  mul r8.x, r7.w, r8.x  // H<0:NaN>
                  sincos r6.w, null, r6.w
                  mul r6.w, r6.w, r7.w  // H<1:NaN>
                  mov r4.w, r4.w  // H<2:NaN:Inf>
                  mov r7.w, -r9.z
                  max r7.w, r7.w, r9.z
                  lt r7.w, r7.w, l(0.999000)
                  movc r8.yzw, r7.wwww, l(0,1.000000,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r9.zxyz, r8.wyzw
                  mul r8.yzw, r9.yyzx, r8.yyzw
                  mov r8.yzw, -r8.yyzw
                  add r8.yzw, r8.yyzw, r10.xxyz
                  dp3 r7.w, r8.yzwy, r8.yzwy
                  rsq r7.w, r7.w
                  mul r8.yzw, r7.wwww, r8.yyzw  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.wyzw, r9.yzxy
                  mul r11.xyz, r8.zwyz, r9.zxyz
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r8.xxxx, r8.yzwy
                  mul r10.xyz, r6.wwww, r10.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx
                  mul r10.xyz, r4.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r8.xyz, r8.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r1.xyzx, r8.xyzx
                  mul r6.w, r4.w, l(2.000000)
                  mul r10.xyz, r8.xyzx, r6.wwww
                  mov r11.xyz, -r1.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r1.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r7.w, r0.xyzx, r10.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r8.x, r0.xyzx, r8.xyzx
                  max r8.x, r8.x, l(0.000000)
                  min r8.x, r8.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.w, l(0.000000), r7.w
                  if_nz r7.w
                    sample_l_indexable(texturecube)(float,float,float,float) r8.yzw, r10.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r3.w, r3.w, l(1.000000)
                    mul r3.w, r3.w, r3.w
                    div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.w, r9.xyzx, r10.xyzx
                    max r7.w, r7.w, l(0.000000)
                    min r7.w, r7.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r9.w, -r3.w
                    add r9.w, r9.w, l(1.000000)
                    mul r10.x, r7.w, r9.w
                    add r10.x, r3.w, r10.x
                    div r7.w, r7.w, r10.x  // ret<0:NaN:Inf>
                    mov r7.w, r7.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.w, r7.w  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r9.x, r9.xyzx, r11.xyzx
                    max r9.x, r9.x, l(0.000000)
                    min r9.x, r9.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r9.y, r9.w, r9.x
                    add r3.w, r3.w, r9.y
                    div r3.w, r9.x, r3.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r3.w, r3.w  // g2<0:NaN:Inf>
                    mul r3.w, r3.w, r7.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r3.w, r3.w  // G<0:NaN:Inf>
                    mov r7.w, -r4.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, l(1.000000)
                    mul r7.w, r7.w, r7.w
                    mul r7.w, r7.w, r7.w
                    mul r7.w, r7.w, r9.x  // Fc<0:[0f,1f]>
                    mov r9.x, -r7.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.xyz, r3.xyzx, r9.xxxx
                    add r9.xyz, r7.wwww, r9.xyzx  // F<0,1,2>
                    mul r8.yzw, r8.yyzw, r9.xxyz
                    mul r8.yzw, r3.wwww, r8.yyzw
                    mul r8.yzw, r4.wwww, r8.yyzw
                    mul r3.w, r6.w, r8.x
                    div r8.xyz, r8.yzwy, r3.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r7.xyz, r7.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r7.xyz, r7.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r6.xyz, r6.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r6.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r6.xyz, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r6.xyz, r6.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.w, l(0.000000), r2.w
                if_nz r3.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r3.w, r8.xyzx, r8.xyzx
                  rsq r3.w, r3.w
                  mul r8.xyz, r3.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r0.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r8.xyzx, r7.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r4.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r4.w, r4.w, r4.w  // a2<0:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r8.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r5.w, r5.w, r5.w  // nh2<0:[0f,1f]>
                  add r6.w, r4.w, l(-1.000000)
                  mul r5.w, r5.w, r6.w
                  add r5.w, r5.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r5.w, r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, l(3.141593)
                  div r4.w, r4.w, r5.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r5.w, r0.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.x, -r5.w
                  add r7.x, r7.x, l(1.000000)
                  mul r7.y, r6.w, r7.x
                  add r7.y, r5.w, r7.y
                  div r6.w, r6.w, r7.y  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r6.w, r6.w  // g1<0:NaN:Inf>
                  nop 
                  mov r7.yzw, r1.xxyz  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.y, r8.xyzx, r7.yzwy
                  max r7.y, r7.y, l(0.000000)
                  min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.x, r7.x, r7.y
                  add r5.w, r5.w, r7.x
                  div r5.w, r7.y, r5.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.w, r5.w  // g2<0:NaN:Inf>
                  mul r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r7.xyz, r9.xyzx, r4.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r3.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r3.w, r2.w, l(1024)
                  breakc_z r3.w
                  nop 
                  mov r3.w, r2.w  // i<0>
                
                #line 139
                  utof r4.w, r3.w
                  div r7.x, r4.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r3.w, r3.w  // i<0>
                
                #line 127
                  mov r4.w, r3.w  // i<0>
                  mov r5.w, r1.w  // uReverse<0>
                  mov r6.w, r1.w  // k<0>
                  loop 
                    ilt r7.z, r6.w, l(10)
                    breakc_z r7.z
                    ishl r7.z, r5.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.w, r4.w, l(1)
                    iadd r5.w, r7.z, r7.w  // uReverse<0>
                    ushr r4.w, r4.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r3.w, r5.w
                  mul r7.y, r3.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r3.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r4.w, r3.w, r3.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.x, -r7.y
                  add r7.x, r7.x, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  add r4.w, r4.w, l(-1.000000)
                  mul r4.w, r7.y, r4.w
                  add r4.w, r4.w, l(1.000000)
                  div r4.w, r7.x, r4.w
                  sqrt r4.w, r4.w  // CosTheta<0:NaN:Inf>
                  mul r7.x, r4.w, r4.w
                  mov r7.x, -r7.x
                  add r7.x, r7.x, l(1.000000)
                  sqrt r7.x, r7.x  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.y, r6.w
                  mul r7.y, r7.y, r7.x  // H<0:NaN>
                  sincos r6.w, null, r6.w
                  mul r6.w, r6.w, r7.x  // H<1:NaN>
                  mov r4.w, r4.w  // H<2:NaN:Inf>
                  mov r7.x, -r8.z
                  max r7.x, r7.x, r8.z
                  lt r7.x, r7.x, l(0.999000)
                  movc r7.xzw, r7.xxxx, l(1.000000,0,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r8.zxyz, r7.wxzw
                  mul r7.xzw, r8.yyzx, r7.xxzw
                  mov r7.xzw, -r7.xxzw
                  add r7.xzw, r7.xxzw, r9.xxyz
                  dp3 r8.w, r7.xzwx, r7.xzwx
                  rsq r8.w, r8.w
                  mul r7.xzw, r7.xxzw, r8.wwww  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wxzw, r8.yzxy
                  mul r10.xyz, r7.zwxz, r8.zxyz
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.xyz, r7.yyyy, r7.xzwx
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx
                  mul r9.xyz, r4.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r1.xyzx, r7.xyzx
                  mul r6.w, r4.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r6.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r1.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r7.w, r0.xyzx, r9.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r7.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r7.yzw, r9.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r3.w, r3.w, l(1.000000)
                    mul r3.w, r3.w, r3.w
                    div r3.w, r3.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r3.w, r3.w  // k<0:Inf>
                
                #line 81
                    dp3 r8.w, r8.xyzx, r9.xyzx
                    max r8.w, r8.w, l(0.000000)
                    min r8.w, r8.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r9.x, -r3.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.y, r8.w, r9.x
                    add r9.y, r3.w, r9.y
                    div r8.w, r8.w, r9.y  // ret<0:NaN:Inf>
                    mov r8.w, r8.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r8.w, r8.w  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r10.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r8.y, r9.x, r8.x
                    add r3.w, r3.w, r8.y
                    div r3.w, r8.x, r3.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r3.w, r3.w  // g2<0:NaN:Inf>
                    mul r3.w, r3.w, r8.w  // ret<0:NaN:Inf>
                    mov r3.w, r3.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r3.w, r3.w  // G<0:NaN:Inf>
                    mov r8.x, -r4.w
                    add r8.x, r8.x, l(1.000000)
                    mul r8.y, r8.x, l(1.000000)
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.x
                    mul r8.x, r8.x, r8.y  // Fc<0:[0f,1f]>
                    mov r8.y, -r8.x
                    add r8.y, r8.y, l(1.000000)
                    mul r8.yzw, r3.xxyz, r8.yyyy
                    add r8.xyz, r8.xxxx, r8.yzwy  // F<0,1,2>
                    mul r7.yzw, r7.yyzw, r8.xxyz
                    mul r7.yzw, r3.wwww, r7.yyzw
                    mul r7.yzw, r4.wwww, r7.yyzw
                    mul r3.w, r6.w, r7.x
                    div r7.xyz, r7.yzwy, r3.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 780 instruction slots used
                            
            };
        }

    }

    technique11 Light0Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 203 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v3.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // texColor<3:Inf>
                
                #line 253
                mul r0.x, r0.x, cb0[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, l(0,0,0,0)  // PS<0: 0f,1: 0f,2: 0f>
                mov o0.w, r0.x  // PS<3:NaN:Inf>
                ret 
                // Approximately 6 instruction slots used
                            
            };
        }

    }

    technique11 Light1Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 11
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 212
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r4.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r7.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r8.xyz, -r7.xyzx
                  add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r8.xyz, r4.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r8.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r7.xyz, r7.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r0.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r8.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r8.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r8.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r7.xyzx, r4.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r4.xyz, l(0,0,0,0)  // SpecularLighting<0: 0f,1: 0f,2: 0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r5.xyz, r4.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r6.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.z, r1.w  // uReverse<0>
                  mov r6.w, r1.w  // k<0>
                  loop 
                    ilt r7.x, r6.w, l(10)
                    breakc_z r7.x
                    ishl r7.x, r6.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.y, r5.w, l(1)
                    iadd r6.z, r7.x, r7.y  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.z
                  mul r6.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r6.y, r6.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r6.x, r6.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r6.y, r6.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r7.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.x, r6.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r6.w, -r6.y
                  add r6.w, r6.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r6.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r6.w, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r6.y, r5.w, r5.w
                  mov r6.y, -r6.y
                  add r6.y, r6.y, l(1.000000)
                  sqrt r6.y, r6.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r6.w, r6.x
                  mul r6.w, r6.w, r6.y  // H<0:NaN>
                  sincos r6.x, null, r6.x
                  mul r6.x, r6.x, r6.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r6.y, -r7.z
                  max r6.y, r6.y, r7.z
                  lt r6.y, r6.y, l(0.999000)
                  movc r8.xyz, r6.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r7.zxyz, r8.zxyz
                  mul r8.xyz, r7.yzxy, r8.xyzx
                  mov r8.xyz, -r8.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  dp3 r6.y, r8.xyzx, r8.xyzx
                  rsq r6.y, r6.y
                  mul r8.xyz, r6.yyyy, r8.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.yzxy, r8.zxyz
                  mul r10.xyz, r7.zxyz, r8.yzxy
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r6.wwww, r8.xyzx
                  mul r6.xyw, r6.xxxx, r9.xyxz
                  add r6.xyw, r6.xyxw, r8.xyxz
                  mul r8.xyz, r5.wwww, r7.xyzx
                  add r6.xyw, r6.xyxw, r8.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r6.xyw, r6.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r6.xywx
                  mul r7.w, r5.w, l(2.000000)
                  mul r8.xyz, r6.xywx, r7.wwww
                  mov r9.xyz, -r1.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r8.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r6.x, r0.xyzx, r6.xywx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r6.y, l(0.000000), r8.w
                  if_nz r6.y
                    sample_l_indexable(texturecube)(float,float,float,float) r9.xyz, r8.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r7.xyz, r7.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r6.y, r7.xyzx, r8.xyzx
                    max r6.y, r6.y, l(0.000000)
                    min r6.y, r6.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r6.w, -r4.w
                    add r6.w, r6.w, l(1.000000)
                    mul r8.x, r6.w, r6.y
                    add r8.x, r4.w, r8.x
                    div r6.y, r6.y, r8.x  // ret<0:NaN:Inf>
                    mov r6.y, r6.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r6.y, r6.y  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r7.x, r7.xyzx, r10.xyzx
                    max r7.x, r7.x, l(0.000000)
                    min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r6.w, r6.w, r7.x
                    add r4.w, r4.w, r6.w
                    div r4.w, r7.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r6.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r6.y, -r5.w
                    add r6.y, r6.y, l(1.000000)
                    mul r6.w, r6.y, l(1.000000)
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.w  // Fc<0:[0f,1f]>
                    mov r6.w, -r6.y
                    add r6.w, r6.w, l(1.000000)
                    mul r7.xyz, r3.xyzx, r6.wwww
                    add r7.xyz, r6.yyyy, r7.xyzx  // F<0,1,2>
                    mul r7.xyz, r7.xyzx, r9.xyzx
                    mul r7.xyz, r4.wwww, r7.xyzx
                    mul r7.xyz, r5.wwww, r7.xyzx
                    mul r4.w, r7.w, r6.x
                    div r6.xyw, r7.xyxz, r4.wwww
                    add r5.xyz, r5.xyzx, r6.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r5.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 284 instruction slots used
                            
            };
        }

    }

    technique11 Light2Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 212
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r0.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r8.xyzx, r4.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r0.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r9.xyzx, r5.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 533 instruction slots used
                            
            };
        }

    }

    technique11 Light3Tex
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 212
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r0.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r8.xyzx, r4.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r9.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r9.xyz, r9.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r9.xyz, r6.xyzx, r9.xyzx
                  add r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r10.xyz, -r3.xyzx
                  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r10.xyz, r5.wwww, r10.xyzx
                  add r10.xyz, r3.xyzx, r10.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r10.xyz, r10.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r10.xyz, r10.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r0.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r11.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r11.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r10.xyzx, r5.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r9.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r6.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r7.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r8.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.w, r1.w  // k<0>
                  loop 
                    ilt r8.z, r7.w, l(10)
                    breakc_z r8.z
                    ishl r8.z, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.w, r5.w, l(1)
                    iadd r6.w, r8.z, r8.w  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r8.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r8.y, r8.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r8.x, r8.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r8.y, r8.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r9.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.w, r8.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r8.x, -r8.y
                  add r8.x, r8.x, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r8.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r8.x, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r8.x, r5.w, r5.w
                  mov r8.x, -r8.x
                  add r8.x, r8.x, l(1.000000)
                  sqrt r8.x, r8.x  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r8.y, r7.w
                  mul r8.y, r8.y, r8.x  // H<0:NaN>
                  sincos r7.w, null, r7.w
                  mul r7.w, r7.w, r8.x  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r8.x, -r9.z
                  max r8.x, r8.x, r9.z
                  lt r8.x, r8.x, l(0.999000)
                  movc r8.xzw, r8.xxxx, l(1.000000,0,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r9.zxyz, r8.wxzw
                  mul r8.xzw, r9.yyzx, r8.xxzw
                  mov r8.xzw, -r8.xxzw
                  add r8.xzw, r8.xxzw, r10.xxyz
                  dp3 r9.w, r8.xzwx, r8.xzwx
                  rsq r9.w, r9.w
                  mul r8.xzw, r8.xxzw, r9.wwww  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.wxzw, r9.yzxy
                  mul r11.xyz, r8.zwxz, r9.zxyz
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r8.yyyy, r8.xzwx
                  mul r10.xyz, r7.wwww, r10.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx
                  mul r10.xyz, r5.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r8.xyz, r8.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r8.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r10.xyz, r8.xyzx, r7.wwww
                  mov r11.xyz, -r1.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r10.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r8.x, r0.xyzx, r8.xyzx
                  max r8.x, r8.x, l(0.000000)
                  min r8.x, r8.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r8.y, l(0.000000), r8.w
                  if_nz r8.y
                    sample_l_indexable(texturecube)(float,float,float,float) r8.yzw, r10.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r9.w, r9.xyzx, r10.xyzx
                    max r9.w, r9.w, l(0.000000)
                    min r9.w, r9.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r10.x, -r4.w
                    add r10.x, r10.x, l(1.000000)
                    mul r10.y, r9.w, r10.x
                    add r10.y, r4.w, r10.y
                    div r9.w, r9.w, r10.y  // ret<0:NaN:Inf>
                    mov r9.w, r9.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r9.w, r9.w  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r9.x, r9.xyzx, r11.xyzx
                    max r9.x, r9.x, l(0.000000)
                    min r9.x, r9.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r9.y, r10.x, r9.x
                    add r4.w, r4.w, r9.y
                    div r4.w, r9.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r9.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r9.x, -r5.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.y, r9.x, l(1.000000)
                    mul r9.x, r9.x, r9.x
                    mul r9.x, r9.x, r9.x
                    mul r9.x, r9.x, r9.y  // Fc<0:[0f,1f]>
                    mov r9.y, -r9.x
                    add r9.y, r9.y, l(1.000000)
                    mul r9.yzw, r3.xxyz, r9.yyyy
                    add r9.xyz, r9.xxxx, r9.yzwy  // F<0,1,2>
                    mul r8.yzw, r8.yyzw, r9.xxyz
                    mul r8.yzw, r4.wwww, r8.yyzw
                    mul r8.yzw, r5.wwww, r8.yyzw
                    mul r4.w, r7.w, r8.x
                    div r8.xyz, r8.yzwy, r4.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r7.xyz, r7.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r7.xyz, r7.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r6.xyz, r6.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r6.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r6.xyz, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r6.xyz, r6.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r0.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r9.xyzx, r5.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 782 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float       
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 1
                
                #line 203 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                sample_indexable(texture2d)(float,float,float,float) r0.x, v3.xyxx, t0.wxyz, s0
                mov r0.x, r0.x  // texColor<3:Inf>
                
                #line 210
                add r0.y, r0.x, l(-0.100000)
                lt r0.y, r0.y, l(0.000000)
                and r0.y, r0.y, l(-1)
                discard r0.y
                
                #line 253
                mul r0.x, r0.x, cb0[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, l(0,0,0,0)  // PS<0: 0f,1: 0f,2: 0f>
                mov o0.w, r0.x  // PS<3:NaN:Inf>
                ret 
                // Approximately 10 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 11
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 210
                add r0.w, r3.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r4.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r7.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r8.xyz, -r7.xyzx
                  add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r8.xyz, r4.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r8.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r7.xyz, r7.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r0.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r8.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r8.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r8.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r7.xyzx, r4.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r4.xyz, l(0,0,0,0)  // SpecularLighting<0: 0f,1: 0f,2: 0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r5.xyz, r4.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r6.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.z, r1.w  // uReverse<0>
                  mov r6.w, r1.w  // k<0>
                  loop 
                    ilt r7.x, r6.w, l(10)
                    breakc_z r7.x
                    ishl r7.x, r6.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.y, r5.w, l(1)
                    iadd r6.z, r7.x, r7.y  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.z
                  mul r6.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r6.y, r6.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r6.x, r6.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r6.y, r6.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r7.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.x, r6.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r6.w, -r6.y
                  add r6.w, r6.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r6.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r6.w, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r6.y, r5.w, r5.w
                  mov r6.y, -r6.y
                  add r6.y, r6.y, l(1.000000)
                  sqrt r6.y, r6.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r6.w, r6.x
                  mul r6.w, r6.w, r6.y  // H<0:NaN>
                  sincos r6.x, null, r6.x
                  mul r6.x, r6.x, r6.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r6.y, -r7.z
                  max r6.y, r6.y, r7.z
                  lt r6.y, r6.y, l(0.999000)
                  movc r8.xyz, r6.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r7.zxyz, r8.zxyz
                  mul r8.xyz, r7.yzxy, r8.xyzx
                  mov r8.xyz, -r8.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  dp3 r6.y, r8.xyzx, r8.xyzx
                  rsq r6.y, r6.y
                  mul r8.xyz, r6.yyyy, r8.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.yzxy, r8.zxyz
                  mul r10.xyz, r7.zxyz, r8.yzxy
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r6.wwww, r8.xyzx
                  mul r6.xyw, r6.xxxx, r9.xyxz
                  add r6.xyw, r6.xyxw, r8.xyxz
                  mul r8.xyz, r5.wwww, r7.xyzx
                  add r6.xyw, r6.xyxw, r8.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r6.xyw, r6.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r6.xywx
                  mul r7.w, r5.w, l(2.000000)
                  mul r8.xyz, r6.xywx, r7.wwww
                  mov r9.xyz, -r1.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r8.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r6.x, r0.xyzx, r6.xywx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r6.y, l(0.000000), r8.w
                  if_nz r6.y
                    sample_l_indexable(texturecube)(float,float,float,float) r9.xyz, r8.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r7.xyz, r7.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r6.y, r7.xyzx, r8.xyzx
                    max r6.y, r6.y, l(0.000000)
                    min r6.y, r6.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r6.w, -r4.w
                    add r6.w, r6.w, l(1.000000)
                    mul r8.x, r6.w, r6.y
                    add r8.x, r4.w, r8.x
                    div r6.y, r6.y, r8.x  // ret<0:NaN:Inf>
                    mov r6.y, r6.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r6.y, r6.y  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r7.x, r7.xyzx, r10.xyzx
                    max r7.x, r7.x, l(0.000000)
                    min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r6.w, r6.w, r7.x
                    add r4.w, r4.w, r6.w
                    div r4.w, r7.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r6.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r6.y, -r5.w
                    add r6.y, r6.y, l(1.000000)
                    mul r6.w, r6.y, l(1.000000)
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.w  // Fc<0:[0f,1f]>
                    mov r6.w, -r6.y
                    add r6.w, r6.w, l(1.000000)
                    mul r7.xyz, r3.xyzx, r6.wwww
                    add r7.xyz, r6.yyyy, r7.xyzx  // F<0,1,2>
                    mul r7.xyz, r7.xyzx, r9.xyzx
                    mul r7.xyz, r4.wwww, r7.xyzx
                    mul r7.xyz, r5.wwww, r7.xyzx
                    mul r4.w, r7.w, r6.x
                    div r6.xyw, r7.xyxz, r4.wwww
                    add r5.xyz, r5.xyzx, r6.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r5.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 288 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 210
                add r0.w, r3.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r0.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r8.xyzx, r4.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r9.xyz, r3.xyzx  // specular<0,1,2>
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r10.xyz, -r9.xyzx
                  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r10.xyz, r5.wwww, r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r0.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r9.xyzx, r5.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 538 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClip
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4 [unused]
                //   float gFogRange;                   // Offset:  112 Size:     4 [unused]
                //   float4 gFogColor;                  // Offset:  128 Size:    16 [unused]
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[7], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 210
                add r0.w, r3.w, l(-0.100000)
                lt r0.w, r0.w, l(0.000000)
                and r0.w, r0.w, l(-1)
                discard r0.w
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r0.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r0.w, r0.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r1.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r2.w, l(0.000000), r1.w
                if_nz r2.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r2.w, r6.xyzx, r6.xyzx
                  rsq r2.w, r2.w
                  mul r6.xyz, r2.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r1.w, r1.w, l(0.000000)
                  min r1.w, r1.w, l(1.000000)
                  mul r4.xyz, r1.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r2.w, r0.xyzx, r1.xyzx
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r0.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r8.xyzx, r4.wwww
                  mul r1.w, r1.w, l(4.000000)
                  mul r1.w, r2.w, r1.w
                  div r5.xyz, r5.xyzx, r1.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r0.w, r0.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r1.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r9.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r9.xyz, r9.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r9.xyz, r6.xyzx, r9.xyzx
                  add r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r10.xyz, -r3.xyzx
                  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r10.xyz, r5.wwww, r10.xyzx
                  add r10.xyz, r3.xyzx, r10.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r10.xyz, r10.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r10.xyz, r10.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r0.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r11.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r11.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r10.xyzx, r5.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r9.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r6.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r7.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r8.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.w, r1.w  // k<0>
                  loop 
                    ilt r8.z, r7.w, l(10)
                    breakc_z r8.z
                    ishl r8.z, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.w, r5.w, l(1)
                    iadd r6.w, r8.z, r8.w  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r8.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r8.y, r8.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r8.x, r8.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r8.y, r8.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r9.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.w, r8.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r8.x, -r8.y
                  add r8.x, r8.x, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r8.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r8.x, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r8.x, r5.w, r5.w
                  mov r8.x, -r8.x
                  add r8.x, r8.x, l(1.000000)
                  sqrt r8.x, r8.x  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r8.y, r7.w
                  mul r8.y, r8.y, r8.x  // H<0:NaN>
                  sincos r7.w, null, r7.w
                  mul r7.w, r7.w, r8.x  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r8.x, -r9.z
                  max r8.x, r8.x, r9.z
                  lt r8.x, r8.x, l(0.999000)
                  movc r8.xzw, r8.xxxx, l(1.000000,0,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r9.zxyz, r8.wxzw
                  mul r8.xzw, r9.yyzx, r8.xxzw
                  mov r8.xzw, -r8.xxzw
                  add r8.xzw, r8.xxzw, r10.xxyz
                  dp3 r9.w, r8.xzwx, r8.xzwx
                  rsq r9.w, r9.w
                  mul r8.xzw, r8.xxzw, r9.wwww  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.wxzw, r9.yzxy
                  mul r11.xyz, r8.zwxz, r9.zxyz
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r8.yyyy, r8.xzwx
                  mul r10.xyz, r7.wwww, r10.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx
                  mul r10.xyz, r5.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r8.xyz, r8.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r8.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r10.xyz, r8.xyzx, r7.wwww
                  mov r11.xyz, -r1.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r10.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r8.x, r0.xyzx, r8.xyzx
                  max r8.x, r8.x, l(0.000000)
                  min r8.x, r8.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r8.y, l(0.000000), r8.w
                  if_nz r8.y
                    sample_l_indexable(texturecube)(float,float,float,float) r8.yzw, r10.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r9.w, r9.xyzx, r10.xyzx
                    max r9.w, r9.w, l(0.000000)
                    min r9.w, r9.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r10.x, -r4.w
                    add r10.x, r10.x, l(1.000000)
                    mul r10.y, r9.w, r10.x
                    add r10.y, r4.w, r10.y
                    div r9.w, r9.w, r10.y  // ret<0:NaN:Inf>
                    mov r9.w, r9.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r9.w, r9.w  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r9.x, r9.xyzx, r11.xyzx
                    max r9.x, r9.x, l(0.000000)
                    min r9.x, r9.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r9.y, r10.x, r9.x
                    add r4.w, r4.w, r9.y
                    div r4.w, r9.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r9.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r9.x, -r5.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.y, r9.x, l(1.000000)
                    mul r9.x, r9.x, r9.x
                    mul r9.x, r9.x, r9.x
                    mul r9.x, r9.x, r9.y  // Fc<0:[0f,1f]>
                    mov r9.y, -r9.x
                    add r9.y, r9.y, l(1.000000)
                    mul r9.yzw, r3.xxyz, r9.yyyy
                    add r9.xyz, r9.xxxx, r9.yzwy  // F<0,1,2>
                    mul r8.yzw, r8.yyzw, r9.xxyz
                    mul r8.yzw, r4.wwww, r8.yyzw
                    mul r8.yzw, r5.wwww, r8.yyzw
                    mul r4.w, r7.w, r8.x
                    div r8.xyz, r8.yzwy, r4.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r7.xyz, r7.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r7.xyz, r7.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r6.xyz, r6.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r6.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r6.xyz, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r6.xyz, r6.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r6.xyz, r2.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r0.w, r0.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r0.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r9.xyzx, r5.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r7.xyz, r7.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r2.w, r1.w  // i<0>
                loop 
                  ult r4.w, r2.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r2.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r1.w  // uReverse<0>
                  mov r7.z, r1.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r0.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r2.w, r2.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 786 instruction slots used
                            
            };
        }

    }

    technique11 Light1Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // EnvMap                            texture  float4        cube    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 11
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.w, l(0.000000), r2.w
                if_nz r3.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r3.w, r6.xyzx, r6.xyzx
                  rsq r3.w, r3.w
                  mul r6.xyz, r3.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r2.xyz, r4.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r0.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r7.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r8.xyz, -r7.xyzx
                  add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r8.xyz, r4.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r8.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r7.xyz, r7.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r1.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r8.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r8.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r8.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r7.xyzx, r4.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r3.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r4.xyz, l(0,0,0,0)  // SpecularLighting<0: 0f,1: 0f,2: 0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r5.xyz, r4.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r2.w  // i<0>
                loop 
                  ult r4.w, r3.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r3.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r6.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.z, r2.w  // uReverse<0>
                  mov r6.w, r2.w  // k<0>
                  loop 
                    ilt r7.x, r6.w, l(10)
                    breakc_z r7.x
                    ishl r7.x, r6.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.y, r5.w, l(1)
                    iadd r6.z, r7.x, r7.y  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r6.w, r6.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.z
                  mul r6.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r6.y, r6.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r6.x, r6.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r6.y, r6.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r1.w  // Roughness<0>
                  mov r7.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.x, r6.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r6.w, -r6.y
                  add r6.w, r6.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r6.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r6.w, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r6.y, r5.w, r5.w
                  mov r6.y, -r6.y
                  add r6.y, r6.y, l(1.000000)
                  sqrt r6.y, r6.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r6.w, r6.x
                  mul r6.w, r6.w, r6.y  // H<0:NaN>
                  sincos r6.x, null, r6.x
                  mul r6.x, r6.x, r6.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r6.y, -r7.z
                  max r6.y, r6.y, r7.z
                  lt r6.y, r6.y, l(0.999000)
                  movc r8.xyz, r6.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r7.zxyz, r8.zxyz
                  mul r8.xyz, r7.yzxy, r8.xyzx
                  mov r8.xyz, -r8.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  dp3 r6.y, r8.xyzx, r8.xyzx
                  rsq r6.y, r6.y
                  mul r8.xyz, r6.yyyy, r8.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.yzxy, r8.zxyz
                  mul r10.xyz, r7.zxyz, r8.yzxy
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r6.wwww, r8.xyzx
                  mul r6.xyw, r6.xxxx, r9.xyxz
                  add r6.xyw, r6.xyxw, r8.xyxz
                  mul r8.xyz, r5.wwww, r7.xyzx
                  add r6.xyw, r6.xyxw, r8.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r6.xyw, r6.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r6.xywx
                  mul r7.w, r5.w, l(2.000000)
                  mul r8.xyz, r6.xywx, r7.wwww
                  mov r9.xyz, -r1.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r8.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r6.x, r0.xyzx, r6.xywx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r6.y, l(0.000000), r8.w
                  if_nz r6.y
                    sample_l_indexable(texturecube)(float,float,float,float) r9.xyz, r8.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r7.xyz, r7.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r6.y, r7.xyzx, r8.xyzx
                    max r6.y, r6.y, l(0.000000)
                    min r6.y, r6.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r6.w, -r4.w
                    add r6.w, r6.w, l(1.000000)
                    mul r8.x, r6.w, r6.y
                    add r8.x, r4.w, r8.x
                    div r6.y, r6.y, r8.x  // ret<0:NaN:Inf>
                    mov r6.y, r6.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r6.y, r6.y  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r7.x, r7.xyzx, r10.xyzx
                    max r7.x, r7.x, l(0.000000)
                    min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r6.w, r6.w, r7.x
                    add r4.w, r4.w, r6.w
                    div r4.w, r7.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r6.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r6.y, -r5.w
                    add r6.y, r6.y, l(1.000000)
                    mul r6.w, r6.y, l(1.000000)
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.y
                    mul r6.y, r6.y, r6.w  // Fc<0:[0f,1f]>
                    mov r6.w, -r6.y
                    add r6.w, r6.w, l(1.000000)
                    mul r7.xyz, r3.xyzx, r6.wwww
                    add r7.xyz, r6.yyyy, r7.xyzx  // F<0,1,2>
                    mul r7.xyz, r7.xyzx, r9.xyzx
                    mul r7.xyz, r4.wwww, r7.xyzx
                    mul r7.xyz, r5.wwww, r7.xyzx
                    mul r4.w, r7.w, r6.x
                    div r6.xyw, r7.xyxz, r4.wwww
                    add r5.xyz, r5.xyzx, r6.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r5.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 291 instruction slots used
                            
            };
        }

    }

    technique11 Light2Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // EnvMap                            texture  float4        cube    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.w, l(0.000000), r2.w
                if_nz r3.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r3.w, r6.xyzx, r6.xyzx
                  rsq r3.w, r3.w
                  mul r6.xyz, r3.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r0.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r1.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r8.xyzx, r4.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r3.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r2.w  // i<0>
                loop 
                  ult r4.w, r3.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r3.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r2.w  // uReverse<0>
                  mov r7.z, r2.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r3.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r3.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)
                  mul r6.xyz, r3.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r1.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r9.xyzx, r5.wwww
                  mul r3.w, r3.w, l(4.000000)
                  mul r3.w, r4.w, r3.w
                  div r7.xyz, r7.xyzx, r3.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r2.w  // i<0>
                loop 
                  ult r4.w, r3.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r3.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r2.w  // uReverse<0>
                  mov r7.z, r2.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 540 instruction slots used
                            
            };
        }

    }

    technique11 Light3Fog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // EnvMap                            texture  float4        cube    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float       
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0,1,2>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r3.w, l(0.000000), r2.w
                if_nz r3.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r3.w, r6.xyzx, r6.xyzx
                  rsq r3.w, r3.w
                  mul r6.xyz, r3.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r3.w, r0.xyzx, r1.xyzx
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r4.w, r6.xyzx, r5.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r5.w, r4.w, l(-5.554730)
                  add r5.w, r5.w, l(-6.983160)
                  mul r4.w, r4.w, r5.w  // ftimes<0:[-12.5379f,0f]>
                  mul r4.w, r4.w, l(1.000000)
                  exp r4.w, r4.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r4.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r4.w, r1.w  // roughness<0>
                
                #line 69
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r5.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r5.w, r5.w, r6.x  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r4.w, r4.w, l(1.000000)
                  mul r4.w, r4.w, r4.w
                  div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r4.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r4.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.xyz, r6.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.xyzx
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r4.w, r4.w, r5.y
                  div r4.w, r5.z, r4.w  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r4.w, r4.w  // g2<0:NaN:Inf>
                  mul r4.w, r4.w, r5.x  // ret<0:NaN:Inf>
                  mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r4.w, r4.w, r5.w
                  mul r5.xyz, r8.xyzx, r4.wwww
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r3.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r2.w  // i<0>
                loop 
                  ult r4.w, r3.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r3.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r2.w  // uReverse<0>
                  mov r7.z, r2.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r3.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r3.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)
                  mul r6.xyz, r3.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r9.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r9.xyz, r9.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r9.xyz, r6.xyzx, r9.xyzx
                  add r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r10.xyz, -r3.xyzx
                  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r10.xyz, r5.wwww, r10.xyzx
                  add r10.xyz, r3.xyzx, r10.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r10.xyz, r10.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r10.xyz, r10.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r1.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r11.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r11.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r10.xyzx, r5.wwww
                  mul r3.w, r3.w, l(4.000000)
                  mul r3.w, r4.w, r3.w
                  div r7.xyz, r7.xyzx, r3.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r9.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r6.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r7.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r2.w  // i<0>
                loop 
                  ult r4.w, r3.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r3.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r8.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.z, r7.w, l(10)
                    breakc_z r8.z
                    ishl r8.z, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.w, r5.w, l(1)
                    iadd r6.w, r8.z, r8.w  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r8.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r8.y, r8.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r8.x, r8.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r8.y, r8.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r1.w  // Roughness<0>
                  mov r9.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.w, r8.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r8.x, -r8.y
                  add r8.x, r8.x, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r8.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r8.x, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r8.x, r5.w, r5.w
                  mov r8.x, -r8.x
                  add r8.x, r8.x, l(1.000000)
                  sqrt r8.x, r8.x  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r8.y, r7.w
                  mul r8.y, r8.y, r8.x  // H<0:NaN>
                  sincos r7.w, null, r7.w
                  mul r7.w, r7.w, r8.x  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r8.x, -r9.z
                  max r8.x, r8.x, r9.z
                  lt r8.x, r8.x, l(0.999000)
                  movc r8.xzw, r8.xxxx, l(1.000000,0,0,0), l(0,0,1.000000,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r9.zxyz, r8.wxzw
                  mul r8.xzw, r9.yyzx, r8.xxzw
                  mov r8.xzw, -r8.xxzw
                  add r8.xzw, r8.xxzw, r10.xxyz
                  dp3 r9.w, r8.xzwx, r8.xzwx
                  rsq r9.w, r9.w
                  mul r8.xzw, r8.xxzw, r9.wwww  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.wxzw, r9.yzxy
                  mul r11.xyz, r8.zwxz, r9.zxyz
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r8.yyyy, r8.xzwx
                  mul r10.xyz, r7.wwww, r10.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx
                  mul r10.xyz, r5.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r8.xyz, r8.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r8.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r10.xyz, r8.xyzx, r7.wwww
                  mov r11.xyz, -r1.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r10.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r8.x, r0.xyzx, r8.xyzx
                  max r8.x, r8.x, l(0.000000)
                  min r8.x, r8.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r8.y, l(0.000000), r8.w
                  if_nz r8.y
                    sample_l_indexable(texturecube)(float,float,float,float) r8.yzw, r10.xyzx, t0.wxyz, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r9.w, r9.xyzx, r10.xyzx
                    max r9.w, r9.w, l(0.000000)
                    min r9.w, r9.w, l(1.000000)  // nv<0:[0f,1f]>
                    mov r10.x, -r4.w
                    add r10.x, r10.x, l(1.000000)
                    mul r10.y, r9.w, r10.x
                    add r10.y, r4.w, r10.y
                    div r9.w, r9.w, r10.y  // ret<0:NaN:Inf>
                    mov r9.w, r9.w  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r9.w, r9.w  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r9.x, r9.xyzx, r11.xyzx
                    max r9.x, r9.x, l(0.000000)
                    min r9.x, r9.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r9.y, r10.x, r9.x
                    add r4.w, r4.w, r9.y
                    div r4.w, r9.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r9.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r9.x, -r5.w
                    add r9.x, r9.x, l(1.000000)
                    mul r9.y, r9.x, l(1.000000)
                    mul r9.x, r9.x, r9.x
                    mul r9.x, r9.x, r9.x
                    mul r9.x, r9.x, r9.y  // Fc<0:[0f,1f]>
                    mov r9.y, -r9.x
                    add r9.y, r9.y, l(1.000000)
                    mul r9.yzw, r3.xxyz, r9.yyyy
                    add r9.xyz, r9.xxxx, r9.yzwy  // F<0,1,2>
                    mul r8.yzw, r8.yyzw, r9.xxyz
                    mul r8.yzw, r4.wwww, r8.yyzw
                    mul r8.yzw, r5.wwww, r8.yyzw
                    mul r4.w, r7.w, r8.x
                    div r8.xyz, r8.yzwy, r4.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r7.xyz, r7.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r7.xyz, r7.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r6.xyz, r6.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r6.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r6.xyz, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r6.xyz, r6.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r3.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r3.w
                if_nz r4.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r4.w, r8.xyzx, r8.xyzx
                  rsq r4.w, r4.w
                  mul r8.xyz, r4.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r3.w, r3.w, l(0.000000)
                  min r3.w, r3.w, l(1.000000)
                  mul r6.xyz, r3.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0,1,2>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:[-1.08315e+038f,1.08315e+038f],1:[-1.08315e+038f,1.08315e+038f],2:[-1.08315e+038f,1.08315e+038f]>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r8.xyzx, r7.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r5.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r5.w, r5.w, r5.w  // a2<0:NaN:Inf>
                  dp3 r6.w, r0.xyzx, r8.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.w, r6.w, r6.w  // nh2<0:[0f,1f]>
                  add r7.w, r5.w, l(-1.000000)
                  mul r6.w, r6.w, r7.w
                  add r6.w, r6.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.w, r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, l(3.141593)
                  div r5.w, r5.w, r6.w  // ret<0:NaN:Inf>
                  mov r5.w, r5.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r6.w, r1.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  div r6.w, r6.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r6.w, r6.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r6.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r6.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r6.w, r6.w, r7.y
                  div r6.w, r7.z, r6.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r6.w, r6.w  // g2<0:NaN:Inf>
                  mul r6.w, r6.w, r7.x  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.w, r5.w, r6.w
                  mul r7.xyz, r9.xyzx, r5.wwww
                  mul r3.w, r3.w, l(4.000000)
                  mul r3.w, r4.w, r3.w
                  div r7.xyz, r7.xyzx, r3.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.w, r2.w  // i<0>
                loop 
                  ult r4.w, r3.w, l(1024)
                  breakc_z r4.w
                  nop 
                  mov r4.w, r3.w  // i<0>
                
                #line 139
                  utof r5.w, r4.w
                  div r7.x, r5.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r4.w, r4.w  // i<0>
                
                #line 127
                  mov r5.w, r4.w  // i<0>
                  mov r6.w, r2.w  // uReverse<0>
                  mov r7.z, r2.w  // k<0>
                  loop 
                    ilt r7.w, r7.z, l(10)
                    breakc_z r7.w
                    ishl r7.w, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.x, r5.w, l(1)
                    iadd r6.w, r7.w, r8.x  // uReverse<0>
                    ushr r5.w, r5.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.z, r7.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r4.w, r6.w
                  mul r7.y, r4.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r4.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r5.w, r4.w, r4.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.z, -r7.y
                  add r7.z, r7.z, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  add r5.w, r5.w, l(-1.000000)
                  mul r5.w, r7.y, r5.w
                  add r5.w, r5.w, l(1.000000)
                  div r5.w, r7.z, r5.w
                  sqrt r5.w, r5.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r5.w, r5.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.z, r7.x
                  mul r7.z, r7.z, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r5.w, r5.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r7.yzw, r7.zzzz, r9.xxyz
                  mul r9.xyz, r7.xxxx, r10.xyzx
                  add r7.xyz, r7.yzwy, r9.xyzx
                  mul r9.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r9.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyz, r7.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r1.xyzx, r7.xyzx
                  mul r7.w, r5.w, l(2.000000)
                  mul r9.xyz, r7.xyzx, r7.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r1.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r8.w, r0.xyzx, r9.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r8.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r4.w, r4.w, l(1.000000)
                    mul r4.w, r4.w, r4.w
                    div r4.w, r4.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r4.w, r4.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.z, -r4.w
                    add r7.z, r7.z, l(1.000000)
                    mul r8.w, r7.z, r7.y
                    add r8.w, r4.w, r8.w
                    div r7.y, r7.y, r8.w  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.z, r7.z, r8.x
                    add r4.w, r4.w, r7.z
                    div r4.w, r8.x, r4.w  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r4.w, r4.w  // g2<0:NaN:Inf>
                    mul r4.w, r4.w, r7.y  // ret<0:NaN:Inf>
                    mov r4.w, r4.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r4.w, r4.w  // G<0:NaN:Inf>
                    mov r7.y, -r5.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.z, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.z  // Fc<0:[0f,1f]>
                    mov r7.z, -r7.y
                    add r7.z, r7.z, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.zzzz
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r4.wwww, r8.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r4.w, r7.w, r7.x
                    div r7.xyz, r8.xyzx, r4.wwww
                    add r6.xyz, r6.xyzx, r7.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r3.w, r3.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, cb1[16].w, l(1.000000)  // color<3>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3>
                ret 
                // Approximately 789 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 189 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r0.y, v3.xyxx, t0.xwyz, s0
                mov r0.y, r0.y  // texColor<3:Inf>
                
                #line 246
                mov r0.z, -cb0[6].w
                add r0.x, r0.z, r0.x
                div r0.x, r0.x, cb0[7].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                add r1.xyz, cb0[8].xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                mul r0.xzw, r0.xxxx, r1.xxyz
                add r0.xzw, r0.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0,1,2>
                
                #line 253
                mul r0.y, r0.y, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xzwx  // PS<0,1,2>
                mov o0.w, r0.y  // PS<3:NaN:Inf>
                ret 
                // Approximately 18 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 11
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 212
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r4.w, r6.xyzx, r6.xyzx
                  rsq r4.w, r4.w
                  mul r6.xyz, r4.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r4.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r7.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r6.xyzx, r5.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r8.xyz, -r7.xyzx
                  add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r8.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r8.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r7.xyz, r7.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.w, r1.w  // roughness<0>
                
                #line 69
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r8.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r6.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r6.x, r6.w, r6.x  // ret<0:NaN:Inf>
                  mov r6.x, r6.x  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.yzw, r1.xxyz  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r5.w, r5.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r8.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r5.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r5.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.yzw, r6.yyzw  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r8.xyzx, r6.yzwy
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r5.y, r5.w, r5.y
                  div r5.y, r5.z, r5.y  // ret<0:NaN:Inf>
                  mov r5.y, r5.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.y, r5.y  // g2<0:NaN:Inf>
                  mul r5.x, r5.y, r5.x  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.x, r5.x, r6.x
                  mul r5.xyz, r7.xyzx, r5.xxxx
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r4.xyz, l(0,0,0,0)  // SpecularLighting<0: 0f,1: 0f,2: 0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r5.xyz, r4.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.x, r5.w
                  div r6.x, r6.x, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.z, r5.w  // i<0>
                  mov r6.w, r2.w  // uReverse<0>
                  mov r7.x, r2.w  // k<0>
                  loop 
                    ilt r7.y, r7.x, l(10)
                    breakc_z r7.y
                    ishl r7.y, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.z, r6.z, l(1)
                    iadd r6.w, r7.y, r7.z  // uReverse<0>
                    ushr r6.z, r6.z, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.x, r7.x, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r6.w
                  mul r6.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r6.y, r6.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r6.x, r6.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r6.y, r6.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r7.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.z, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.x, r6.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r6.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.z, r6.z, r6.z
                  add r6.z, r6.z, l(-1.000000)
                  mul r6.y, r6.y, r6.z
                  add r6.y, r6.y, l(1.000000)
                  div r6.y, r7.w, r6.y
                  sqrt r6.y, r6.y  // CosTheta<0:NaN:Inf>
                  mul r6.z, r6.y, r6.y
                  mov r6.z, -r6.z
                  add r6.z, r6.z, l(1.000000)
                  sqrt r6.z, r6.z  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r6.x
                  mul r7.w, r6.z, r7.w  // H<0:NaN>
                  sincos r6.x, null, r6.x
                  mul r6.x, r6.x, r6.z  // H<1:NaN>
                  mov r6.y, r6.y  // H<2:NaN:Inf>
                  mov r6.z, -r7.z
                  max r6.z, r6.z, r7.z
                  lt r6.z, r6.z, l(0.999000)
                  movc r8.xyz, r6.zzzz, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r7.zxyz, r8.zxyz
                  mul r8.xyz, r7.yzxy, r8.xyzx
                  mov r8.xyz, -r8.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  dp3 r6.z, r8.xyzx, r8.xyzx
                  rsq r6.z, r6.z
                  mul r8.xyz, r6.zzzz, r8.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.yzxy, r8.zxyz
                  mul r10.xyz, r7.zxyz, r8.yzxy
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r7.wwww, r8.xyzx
                  mul r9.xyz, r6.xxxx, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  mul r6.xyz, r6.yyyy, r7.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r6.xyz, r6.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r1.xyzx, r6.xyzx
                  mul r8.x, r7.w, l(2.000000)
                  mul r8.xyz, r6.xyzx, r8.xxxx
                  mov r9.xyz, -r1.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.x, r0.xyzx, r8.xyzx
                  max r9.x, r9.x, l(0.000000)
                  min r9.x, r9.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r6.x, r0.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.y, r7.w, l(0.000000)
                  min r6.y, r6.y, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r6.z, l(0.000000), r9.x
                  if_nz r6.z
                    sample_l_indexable(texturecube)(float,float,float,float) r9.xyz, r8.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r7.xyz, r7.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r6.z, r7.xyzx, r8.xyzx
                    max r6.z, r6.z, l(0.000000)
                    min r6.z, r6.z, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r8.x, r6.z, r7.w
                    add r8.x, r5.w, r8.x
                    div r6.z, r6.z, r8.x  // ret<0:NaN:Inf>
                    mov r6.z, r6.z  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r6.z, r6.z  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r7.x, r7.xyzx, r10.xyzx
                    max r7.x, r7.x, l(0.000000)
                    min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.y, r7.w, r7.x
                    add r5.w, r5.w, r7.y
                    div r5.w, r7.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r6.z  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r6.z, -r6.y
                    add r6.z, r6.z, l(1.000000)
                    mul r7.x, r6.z, l(1.000000)
                    mul r6.z, r6.z, r6.z
                    mul r6.z, r6.z, r6.z
                    mul r6.z, r6.z, r7.x  // Fc<0:[0f,1f]>
                    mov r7.x, -r6.z
                    add r7.x, r7.x, l(1.000000)
                    mul r7.xyz, r3.xyzx, r7.xxxx
                    add r7.xyz, r6.zzzz, r7.xyzx  // F<0,1,2>
                    mul r7.xyz, r7.xyzx, r9.xyzx
                    mul r7.xyz, r5.wwww, r7.xyzx
                    mul r7.xyz, r6.yyyy, r7.xyzx
                    mul r5.w, r8.w, r6.x
                    div r6.xyz, r7.xyzx, r5.wwww
                    add r5.xyz, r5.xyzx, r6.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r5.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 293 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 212
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r4.w, r6.xyzx, r6.xyzx
                  rsq r4.w, r4.w
                  mul r6.xyz, r4.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r6.xyzx, r5.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.w, r1.w  // roughness<0>
                
                #line 69
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r6.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r6.x, r6.w, r6.x  // ret<0:NaN:Inf>
                  mov r6.x, r6.x  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.yzw, r1.xxyz  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r5.w, r5.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r5.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r5.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.yzw, r6.yyzw  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.yzwy
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r5.y, r5.w, r5.y
                  div r5.y, r5.z, r5.y  // ret<0:NaN:Inf>
                  mov r5.y, r5.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.y, r5.y  // g2<0:NaN:Inf>
                  mul r5.x, r5.y, r5.x  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.x, r5.x, r6.x
                  mul r5.xyz, r8.xyzx, r5.xxxx
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r4.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r5.w, l(0.000000), r4.w
                if_nz r5.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)
                  mul r6.xyz, r4.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r1.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r7.w, r6.w, l(-5.554730)
                  add r7.w, r7.w, l(-6.983160)
                  mul r6.w, r6.w, r7.w  // ftimes<0:[-12.5379f,0f]>
                  mul r6.w, r6.w, l(1.000000)
                  exp r6.w, r6.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r6.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r8.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r7.w, r7.w, r7.w  // nh2<0:[0f,1f]>
                  add r8.x, r6.w, l(-1.000000)
                  mul r7.w, r7.w, r8.x
                  add r7.w, r7.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r7.w, r7.w, r7.w  // g2<0:NaN:Inf>
                  mul r7.w, r7.w, l(3.141593)
                  div r6.w, r6.w, r7.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r7.w, r1.w, l(1.000000)
                  mul r7.w, r7.w, r7.w
                  div r7.w, r7.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r7.w, r7.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r7.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r7.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r7.y, r7.w, r7.y
                  div r7.y, r7.z, r7.y  // ret<0:NaN:Inf>
                  mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r7.y, r7.y  // g2<0:NaN:Inf>
                  mul r7.x, r7.y, r7.x  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r6.w, r6.w, r7.x
                  mul r7.xyz, r9.xyzx, r6.wwww
                  mul r4.w, r4.w, l(4.000000)
                  mul r4.w, r5.w, r4.w
                  div r7.xyz, r7.xyzx, r4.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 542 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 13
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 212
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r4.w, r6.xyzx, r6.xyzx
                  rsq r4.w, r4.w
                  mul r6.xyz, r4.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r6.xyzx, r5.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.w, r1.w  // roughness<0>
                
                #line 69
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r6.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r6.x, r6.w, r6.x  // ret<0:NaN:Inf>
                  mov r6.x, r6.x  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.yzw, r1.xxyz  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r5.w, r5.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r5.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r5.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.yzw, r6.yyzw  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.yzwy
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r5.y, r5.w, r5.y
                  div r5.y, r5.z, r5.y  // ret<0:NaN:Inf>
                  mov r5.y, r5.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.y, r5.y  // g2<0:NaN:Inf>
                  mul r5.x, r5.y, r5.x  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.x, r5.x, r6.x
                  mul r5.xyz, r8.xyzx, r5.xxxx
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r4.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r5.w, l(0.000000), r4.w
                if_nz r5.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)
                  mul r6.xyz, r4.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r9.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r9.xyz, r9.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r9.xyz, r6.xyzx, r9.xyzx
                  add r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r1.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r7.w, r6.w, l(-5.554730)
                  add r7.w, r7.w, l(-6.983160)
                  mul r6.w, r6.w, r7.w  // ftimes<0:[-12.5379f,0f]>
                  mul r6.w, r6.w, l(1.000000)
                  exp r6.w, r6.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r10.xyz, -r3.xyzx
                  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r10.xyz, r6.wwww, r10.xyzx
                  add r10.xyz, r3.xyzx, r10.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r10.xyz, r10.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r10.xyz, r10.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r11.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 69
                  mul r6.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r7.w, r11.xyzx, r8.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r7.w, r7.w, r7.w  // nh2<0:[0f,1f]>
                  add r8.x, r6.w, l(-1.000000)
                  mul r7.w, r7.w, r8.x
                  add r7.w, r7.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r7.w, r7.w, r7.w  // g2<0:NaN:Inf>
                  mul r7.w, r7.w, l(3.141593)
                  div r6.w, r6.w, r7.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r7.w, r1.w, l(1.000000)
                  mul r7.w, r7.w, r7.w
                  div r7.w, r7.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r11.xyz, r11.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r7.w, r7.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r11.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r7.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r7.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r8.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r11.xyzx, r8.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r7.y, r7.w, r7.y
                  div r7.y, r7.z, r7.y  // ret<0:NaN:Inf>
                  mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r7.y, r7.y  // g2<0:NaN:Inf>
                  mul r7.x, r7.y, r7.x  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r6.w, r6.w, r7.x
                  mul r7.xyz, r10.xyzx, r6.wwww
                  mul r4.w, r4.w, l(4.000000)
                  mul r4.w, r5.w, r4.w
                  div r7.xyz, r7.xyzx, r4.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r9.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r6.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r7.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r8.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.w, r2.w  // uReverse<0>
                  mov r8.z, r2.w  // k<0>
                  loop 
                    ilt r8.w, r8.z, l(10)
                    breakc_z r8.w
                    ishl r8.w, r7.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r9.x, r6.w, l(1)
                    iadd r7.w, r8.w, r9.x  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r8.z, r8.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.w
                  mul r8.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r8.y, r8.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r8.x, r8.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r8.y, r8.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r9.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r8.x, r8.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r8.z, -r8.y
                  add r8.z, r8.z, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r8.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r8.z, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r8.y, r6.w, r6.w
                  mov r8.y, -r8.y
                  add r8.y, r8.y, l(1.000000)
                  sqrt r8.y, r8.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r8.z, r8.x
                  mul r8.z, r8.z, r8.y  // H<0:NaN>
                  sincos r8.x, null, r8.x
                  mul r8.x, r8.x, r8.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r8.y, -r9.z
                  max r8.y, r8.y, r9.z
                  lt r8.y, r8.y, l(0.999000)
                  movc r10.xyz, r8.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r11.xyz, r9.zxyz, r10.zxyz
                  mul r10.xyz, r9.yzxy, r10.xyzx
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r8.y, r10.xyzx, r10.xyzx
                  rsq r8.y, r8.y
                  mul r10.xyz, r8.yyyy, r10.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r11.xyz, r9.yzxy, r10.zxyz
                  mul r12.xyz, r9.zxyz, r10.yzxy
                  mov r12.xyz, -r12.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.yzw, r8.zzzz, r10.xxyz
                  mul r10.xyz, r8.xxxx, r11.xyzx
                  add r8.xyz, r8.yzwy, r10.xyzx
                  mul r10.xyz, r6.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r8.xyz, r8.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r8.xyzx
                  mul r8.w, r6.w, l(2.000000)
                  mul r10.xyz, r8.xyzx, r8.wwww
                  mov r11.xyz, -r1.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r10.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r8.x, r0.xyzx, r8.xyzx
                  max r8.x, r8.x, l(0.000000)
                  min r8.x, r8.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r8.y, l(0.000000), r9.w
                  if_nz r8.y
                    sample_l_indexable(texturecube)(float,float,float,float) r11.xyz, r10.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r12.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r8.y, r9.xyzx, r10.xyzx
                    max r8.y, r8.y, l(0.000000)
                    min r8.y, r8.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r8.z, -r5.w
                    add r8.z, r8.z, l(1.000000)
                    mul r9.w, r8.z, r8.y
                    add r9.w, r5.w, r9.w
                    div r8.y, r8.y, r9.w  // ret<0:NaN:Inf>
                    mov r8.y, r8.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r8.y, r8.y  // g1<0:NaN:Inf>
                    nop 
                    mov r12.xyz, r12.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r9.x, r9.xyzx, r12.xyzx
                    max r9.x, r9.x, l(0.000000)
                    min r9.x, r9.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r8.z, r8.z, r9.x
                    add r5.w, r5.w, r8.z
                    div r5.w, r9.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r8.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r8.y, -r6.w
                    add r8.y, r8.y, l(1.000000)
                    mul r8.z, r8.y, l(1.000000)
                    mul r8.y, r8.y, r8.y
                    mul r8.y, r8.y, r8.y
                    mul r8.y, r8.y, r8.z  // Fc<0:[0f,1f]>
                    mov r8.z, -r8.y
                    add r8.z, r8.z, l(1.000000)
                    mul r9.xyz, r3.xyzx, r8.zzzz
                    add r9.xyz, r8.yyyy, r9.xyzx  // F<0,1,2>
                    mul r9.xyz, r9.xyzx, r11.xyzx
                    mul r9.xyz, r5.wwww, r9.xyzx
                    mul r9.xyz, r6.wwww, r9.xyzx
                    mul r5.w, r8.w, r8.x
                    div r8.xyz, r9.xyzx, r5.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r7.xyz, r7.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r7.xyz, r7.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r6.xyz, r6.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r6.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r6.xyz, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r6.xyz, r6.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r4.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r5.w, l(0.000000), r4.w
                if_nz r5.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)
                  mul r6.xyz, r4.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r1.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r7.w, r6.w, l(-5.554730)
                  add r7.w, r7.w, l(-6.983160)
                  mul r6.w, r6.w, r7.w  // ftimes<0:[-12.5379f,0f]>
                  mul r6.w, r6.w, l(1.000000)
                  exp r6.w, r6.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r6.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r8.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r7.w, r7.w, r7.w  // nh2<0:[0f,1f]>
                  add r8.x, r6.w, l(-1.000000)
                  mul r7.w, r7.w, r8.x
                  add r7.w, r7.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r7.w, r7.w, r7.w  // g2<0:NaN:Inf>
                  mul r7.w, r7.w, l(3.141593)
                  div r6.w, r6.w, r7.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r7.w, r1.w, l(1.000000)
                  mul r7.w, r7.w, r7.w
                  div r7.w, r7.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r7.w, r7.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r7.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r7.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r7.y, r7.w, r7.y
                  div r7.y, r7.z, r7.y  // ret<0:NaN:Inf>
                  mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r7.y, r7.y  // g2<0:NaN:Inf>
                  mul r7.x, r7.y, r7.x  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r6.w, r6.w, r7.x
                  mul r7.xyz, r9.xyzx, r6.wwww
                  mul r4.w, r4.w, l(4.000000)
                  mul r4.w, r5.w, r4.w
                  div r7.xyz, r7.xyzx, r4.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 792 instruction slots used
                            
            };
        }

    }

    technique11 Light0TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96 [unused]
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // samAnisotropic                    sampler      NA          NA    0        1
                // gDiffuseMap                       texture  float4          2d    0        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float       
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[17], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_resource_texture2d (float,float,float,float) t0
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 2
                
                #line 189 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, -v1.xyzx
                add r0.xyz, r0.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.x, r0.xyzx, r0.xyzx
                sqrt r0.x, r0.x  // distToEye<0:NaN:Inf>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r0.y, v3.xyxx, t0.xwyz, s0
                mov r0.y, r0.y  // texColor<3:Inf>
                
                #line 210
                add r0.z, r0.y, l(-0.100000)
                lt r0.z, r0.z, l(0.000000)
                and r0.z, r0.z, l(-1)
                discard r0.z
                
                #line 246
                mov r0.z, -cb0[6].w
                add r0.x, r0.z, r0.x
                div r0.x, r0.x, cb0[7].x
                max r0.x, r0.x, l(0.000000)
                min r0.x, r0.x, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                add r1.xyz, cb0[8].xyzx, l(-0.000000, -0.000000, -0.000000, 0.000000)
                mul r0.xzw, r0.xxxx, r1.xxyz
                add r0.xzw, r0.xxzw, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0,1,2>
                
                #line 253
                mul r0.y, r0.y, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xzwx  // PS<0,1,2>
                mov o0.w, r0.y  // PS<3:NaN:Inf>
                ret 
                // Approximately 22 instruction slots used
                            
            };
        }

    }

    technique11 Light1TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 11
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 210
                add r1.w, r3.w, l(-0.100000)
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard r1.w
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r4.w, r6.xyzx, r6.xyzx
                  rsq r4.w, r4.w
                  mul r6.xyz, r4.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r4.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r7.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r6.xyzx, r5.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r8.xyz, -r7.xyzx
                  add r8.xyz, r8.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r8.xyz, r5.wwww, r8.xyzx
                  add r7.xyz, r7.xyzx, r8.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r7.xyz, r7.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r7.xyz, r7.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.w, r1.w  // roughness<0>
                
                #line 69
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r8.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r6.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r6.x, r6.w, r6.x  // ret<0:NaN:Inf>
                  mov r6.x, r6.x  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.yzw, r1.xxyz  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r5.w, r5.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r8.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r5.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r5.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.yzw, r6.yyzw  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r8.xyzx, r6.yzwy
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r5.y, r5.w, r5.y
                  div r5.y, r5.z, r5.y  // ret<0:NaN:Inf>
                  mov r5.y, r5.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.y, r5.y  // g2<0:NaN:Inf>
                  mul r5.x, r5.y, r5.x  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.x, r5.x, r6.x
                  mul r5.xyz, r7.xyzx, r5.xxxx
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r4.xyz, l(0,0,0,0)  // SpecularLighting<0: 0f,1: 0f,2: 0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r5.xyz, r4.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.x, r5.w
                  div r6.x, r6.x, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.z, r5.w  // i<0>
                  mov r6.w, r2.w  // uReverse<0>
                  mov r7.x, r2.w  // k<0>
                  loop 
                    ilt r7.y, r7.x, l(10)
                    breakc_z r7.y
                    ishl r7.y, r6.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r7.z, r6.z, l(1)
                    iadd r6.w, r7.y, r7.z  // uReverse<0>
                    ushr r6.z, r6.z, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.x, r7.x, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r6.w
                  mul r6.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r6.y, r6.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r6.x, r6.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r6.y, r6.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r6.xy, r6.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r7.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.z, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.x, r6.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r6.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.z, r6.z, r6.z
                  add r6.z, r6.z, l(-1.000000)
                  mul r6.y, r6.y, r6.z
                  add r6.y, r6.y, l(1.000000)
                  div r6.y, r7.w, r6.y
                  sqrt r6.y, r6.y  // CosTheta<0:NaN:Inf>
                  mul r6.z, r6.y, r6.y
                  mov r6.z, -r6.z
                  add r6.z, r6.z, l(1.000000)
                  sqrt r6.z, r6.z  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r6.x
                  mul r7.w, r6.z, r7.w  // H<0:NaN>
                  sincos r6.x, null, r6.x
                  mul r6.x, r6.x, r6.z  // H<1:NaN>
                  mov r6.y, r6.y  // H<2:NaN:Inf>
                  mov r6.z, -r7.z
                  max r6.z, r6.z, r7.z
                  lt r6.z, r6.z, l(0.999000)
                  movc r8.xyz, r6.zzzz, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r9.xyz, r7.zxyz, r8.zxyz
                  mul r8.xyz, r7.yzxy, r8.xyzx
                  mov r8.xyz, -r8.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  dp3 r6.z, r8.xyzx, r8.xyzx
                  rsq r6.z, r6.z
                  mul r8.xyz, r6.zzzz, r8.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.yzxy, r8.zxyz
                  mul r10.xyz, r7.zxyz, r8.yzxy
                  mov r10.xyz, -r10.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.xyz, r7.wwww, r8.xyzx
                  mul r9.xyz, r6.xxxx, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx
                  mul r6.xyz, r6.yyyy, r7.xyzx
                  add r6.xyz, r6.xyzx, r8.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r6.xyz, r6.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r7.w, r1.xyzx, r6.xyzx
                  mul r8.x, r7.w, l(2.000000)
                  mul r8.xyz, r6.xyzx, r8.xxxx
                  mov r9.xyz, -r1.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.x, r0.xyzx, r8.xyzx
                  max r9.x, r9.x, l(0.000000)
                  min r9.x, r9.x, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r6.x, r0.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.y, r7.w, l(0.000000)
                  min r6.y, r6.y, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r6.z, l(0.000000), r9.x
                  if_nz r6.z
                    sample_l_indexable(texturecube)(float,float,float,float) r9.xyz, r8.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r7.xyz, r7.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r8.xyz, r8.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r6.z, r7.xyzx, r8.xyzx
                    max r6.z, r6.z, l(0.000000)
                    min r6.z, r6.z, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r8.x, r6.z, r7.w
                    add r8.x, r5.w, r8.x
                    div r6.z, r6.z, r8.x  // ret<0:NaN:Inf>
                    mov r6.z, r6.z  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r6.z, r6.z  // g1<0:NaN:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r7.x, r7.xyzx, r10.xyzx
                    max r7.x, r7.x, l(0.000000)
                    min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.y, r7.w, r7.x
                    add r5.w, r5.w, r7.y
                    div r5.w, r7.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r6.z  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r6.z, -r6.y
                    add r6.z, r6.z, l(1.000000)
                    mul r7.x, r6.z, l(1.000000)
                    mul r6.z, r6.z, r6.z
                    mul r6.z, r6.z, r6.z
                    mul r6.z, r6.z, r7.x  // Fc<0:[0f,1f]>
                    mov r7.x, -r6.z
                    add r7.x, r7.x, l(1.000000)
                    mul r7.xyz, r3.xyzx, r7.xxxx
                    add r7.xyz, r6.zzzz, r7.xyzx  // F<0,1,2>
                    mul r7.xyz, r7.xyzx, r9.xyzx
                    mul r7.xyz, r5.wwww, r7.xyzx
                    mul r7.xyz, r6.yyyy, r7.xyzx
                    mul r5.w, r8.w, r6.x
                    div r6.xyz, r7.xyzx, r5.wwww
                    add r5.xyz, r5.xyzx, r6.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r5.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 297 instruction slots used
                            
            };
        }

    }

    technique11 Light2TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 12
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 210
                add r1.w, r3.w, l(-0.100000)
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard r1.w
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r4.w, r6.xyzx, r6.xyzx
                  rsq r4.w, r4.w
                  mul r6.xyz, r4.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r6.xyzx, r5.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.w, r1.w  // roughness<0>
                
                #line 69
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r6.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r6.x, r6.w, r6.x  // ret<0:NaN:Inf>
                  mov r6.x, r6.x  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.yzw, r1.xxyz  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r5.w, r5.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r5.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r5.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.yzw, r6.yyzw  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.yzwy
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r5.y, r5.w, r5.y
                  div r5.y, r5.z, r5.y  // ret<0:NaN:Inf>
                  mov r5.y, r5.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.y, r5.y  // g2<0:NaN:Inf>
                  mul r5.x, r5.y, r5.x  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.x, r5.x, r6.x
                  mul r5.xyz, r8.xyzx, r5.xxxx
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r4.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r5.w, l(0.000000), r4.w
                if_nz r5.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)
                  mul r6.xyz, r4.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r1.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r7.w, r6.w, l(-5.554730)
                  add r7.w, r7.w, l(-6.983160)
                  mul r6.w, r6.w, r7.w  // ftimes<0:[-12.5379f,0f]>
                  mul r6.w, r6.w, l(1.000000)
                  exp r6.w, r6.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r6.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r8.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r7.w, r7.w, r7.w  // nh2<0:[0f,1f]>
                  add r8.x, r6.w, l(-1.000000)
                  mul r7.w, r7.w, r8.x
                  add r7.w, r7.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r7.w, r7.w, r7.w  // g2<0:NaN:Inf>
                  mul r7.w, r7.w, l(3.141593)
                  div r6.w, r6.w, r7.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r7.w, r1.w, l(1.000000)
                  mul r7.w, r7.w, r7.w
                  div r7.w, r7.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r7.w, r7.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r7.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r7.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r7.y, r7.w, r7.y
                  div r7.y, r7.z, r7.y  // ret<0:NaN:Inf>
                  mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r7.y, r7.y  // g2<0:NaN:Inf>
                  mul r7.x, r7.y, r7.x  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r6.w, r6.w, r7.x
                  mul r7.xyz, r9.xyzx, r6.wwww
                  mul r4.w, r4.w, l(4.000000)
                  mul r4.w, r5.w, r4.w
                  div r7.xyz, r7.xyzx, r4.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 546 instruction slots used
                            
            };
        }

    }

    technique11 Light3TexAlphaClipFog
    {
        pass P0
        {
            VertexShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40 [unused]
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // cbPerObject                       cbuffer      NA          NA    0        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // POSITION                 0   xyz         0     NONE  float   xyz 
                // NORMAL                   0   xyz         1     NONE  float   xyz 
                // TEXCOORD                 0   xy          2     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float   xyzw
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                vs_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[14], immediateIndexed
                dcl_input v0.xyz
                dcl_input v1.xyz
                dcl_input v2.xy
                dcl_output_siv o0.xyzw, position
                dcl_output o1.xyz
                dcl_output o2.xyz
                dcl_output o3.xy
                dcl_temps 5
                
                #line 171 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, v0.xyzx
                mov r0.w, l(1.000000)
                dp4 r1.x, r0.xyzw, cb0[0].xyzw  // vout<4:NaN:Inf>
                dp4 r1.y, r0.xyzw, cb0[1].xyzw  // vout<5:NaN:Inf>
                dp4 r1.z, r0.xyzw, cb0[2].xyzw  // vout<6:NaN:Inf>
                dp3 r2.x, v1.xyzx, cb0[4].xyzx  // vout<7:NaN:Inf>
                dp3 r2.y, v1.xyzx, cb0[5].xyzx  // vout<8:NaN:Inf>
                dp3 r2.z, v1.xyzx, cb0[6].xyzx  // vout<9:NaN:Inf>
                
                #line 175
                dp4 r3.x, r0.xyzw, cb0[8].xyzw  // vout<0:NaN:Inf>
                dp4 r3.y, r0.xyzw, cb0[9].xyzw  // vout<1:NaN:Inf>
                dp4 r3.z, r0.xyzw, cb0[10].xyzw  // vout<2:NaN:Inf>
                dp4 r3.w, r0.xyzw, cb0[11].xyzw  // vout<3:NaN:Inf>
                
                #line 178
                mov r0.xy, v2.xyxx
                mov r0.zw, l(0,0,0,1.000000)
                dp4 r4.x, r0.xyzw, cb0[12].xyzw  // vout<10:NaN:Inf>
                dp4 r4.y, r0.xyzw, cb0[13].xyzw  // vout<11:NaN:Inf>
                mov o0.xyzw, r3.xyzw  // VS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf,3:NaN:Inf>
                mov o1.xyz, r1.xyzx  // VS<4:NaN:Inf,5:NaN:Inf,6:NaN:Inf>
                mov o2.xyz, r2.xyzx  // VS<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                mov o3.xy, r4.xyxx  // VS<10:NaN:Inf,11:NaN:Inf>
                ret 
                // Approximately 21 instruction slots used
                            
            };
            GeometryShader = NULL;
            PixelShader = asm {
                //
                // Generated by Microsoft (R) HLSL Shader Compiler 9.29.952.3111
                //
                //
                // Buffer Definitions: 
                //
                // cbuffer cbPerFrame
                // {
                //
                //   struct PBRDirectionalLight
                //   {
                //       
                //       float4 Diffuse;                // Offset:    0
                //       float3 Direction;              // Offset:   16
                //       float pad;                     // Offset:   28
                //
                //   } gDirLights[3];                   // Offset:    0 Size:    96
                //   float3 gEyePosW;                   // Offset:   96 Size:    12
                //   float gFogStart;                   // Offset:  108 Size:     4
                //   float gFogRange;                   // Offset:  112 Size:     4
                //   float4 gFogColor;                  // Offset:  128 Size:    16
                //
                // }
                //
                // cbuffer cbPerObject
                // {
                //
                //   float4x4 gWorld;                   // Offset:    0 Size:    64 [unused]
                //   float4x4 gWorldInvTranspose;       // Offset:   64 Size:    64 [unused]
                //   float4x4 gWorldViewProj;           // Offset:  128 Size:    64 [unused]
                //   float4x4 gTexTransform;            // Offset:  192 Size:    64 [unused]
                //   
                //   struct PBRMaterial
                //   {
                //       
                //       float4 diffuse;                // Offset:  256
                //       float4 specular;               // Offset:  272
                //       float roughness;               // Offset:  288
                //       float metal;                   // Offset:  292
                //
                //   } gMaterial;                       // Offset:  256 Size:    40
                //
                // }
                //
                //
                // Resource Bindings:
                //
                // Name                                 Type  Format         Dim Slot Elements
                // ------------------------------ ---------- ------- ----------- ---- --------
                // EnvMapSampler                     sampler      NA          NA    0        1
                // samAnisotropic                    sampler      NA          NA    1        1
                // EnvMap                            texture  float4        cube    0        1
                // gDiffuseMap                       texture  float4          2d    1        1
                // cbPerFrame                        cbuffer      NA          NA    0        1
                // cbPerObject                       cbuffer      NA          NA    1        1
                //
                //
                //
                // Input signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_POSITION              0   xyzw        0      POS  float       
                // POSITION                 0   xyz         1     NONE  float   xyz 
                // NORMAL                   0   xyz         2     NONE  float   xyz 
                // TEXCOORD                 0   xy          3     NONE  float   xy  
                //
                //
                // Output signature:
                //
                // Name                 Index   Mask Register SysValue Format   Used
                // -------------------- ----- ------ -------- -------- ------ ------
                // SV_Target                0   xyzw        0   TARGET  float   xyzw
                //
                ps_5_0
                dcl_globalFlags refactoringAllowed
                dcl_constantbuffer cb0[9], immediateIndexed
                dcl_constantbuffer cb1[19], immediateIndexed
                dcl_sampler s0, mode_default
                dcl_sampler s1, mode_default
                dcl_resource_texturecube (float,float,float,float) t0
                dcl_resource_texture2d (float,float,float,float) t1
                dcl_input_ps linear v1.xyz
                dcl_input_ps linear v2.xyz
                dcl_input_ps linear v3.xy
                dcl_output o0.xyzw
                dcl_temps 13
                
                #line 186 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                dp3 r0.x, v2.xyzx, v2.xyzx
                rsq r0.x, r0.x
                mul r0.xyz, r0.xxxx, v2.xyzx  // pin<7:NaN:Inf,8:NaN:Inf,9:NaN:Inf>
                
                #line 189
                mov r1.xyz, -v1.xyzx
                add r1.xyz, r1.xyzx, cb0[6].xyzx  // toEye<0:Inf,1:Inf,2:Inf>
                
                #line 192
                dp3 r0.w, r1.xyzx, r1.xyzx
                sqrt r0.w, r0.w  // distToEye<0:NaN:Inf>
                
                #line 195
                div r1.xyz, r1.xyzx, r0.wwww  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r2.xyz, cb1[16].xyzx  // diffuse<0,1,2>
                
                #line 203
                sample_indexable(texture2d)(float,float,float,float) r3.xyzw, v3.xyxx, t1.xyzw, s1  // texColor<0:Inf,1:Inf,2:Inf,3:Inf>
                
                #line 210
                add r1.w, r3.w, l(-0.100000)
                lt r1.w, r1.w, l(0.000000)
                and r1.w, r1.w, l(-1)
                discard r1.w
                mul r2.xyz, r2.xyzx, r3.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r2.xyz, r2.xyzx  // diffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r3.xyz, cb1[17].xyzx  // specular<0,1,2>
                mov r1.w, cb1[18].x  // roughness<0>
                mov r4.xyz, cb0[0].xyzx  // L<0,1,2>
                mov r5.xyz, cb0[1].xyzx  // L<4,5,6>
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // toEye<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 12
                mov r5.xyz, -r5.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r0.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // lightcolor<0,1,2>
                mov r3.xyz, r3.xyzx  // specular<0,1,2>
                mov r1.w, r1.w  // roughness<0>
                
                #line 176 "Brdf.fx"
                dp3 r2.w, r5.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r4.w, l(0.000000), r2.w
                if_nz r4.w
                  add r6.xyz, r1.xyzx, r5.xyzx
                  dp3 r4.w, r6.xyzx, r6.xyzx
                  rsq r4.w, r4.w
                  mul r6.xyz, r4.wwww, r6.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r4.xyz, r4.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r2.w, r2.w, l(0.000000)
                  min r2.w, r2.w, l(1.000000)
                  mul r4.xyz, r2.wwww, r4.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r7.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r7.xyz, r7.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r7.xyz, r4.xyzx, r7.xyzx
                  add r7.xyz, r7.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r4.w, r0.xyzx, r1.xyzx
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r3.xyzx  // specular<0,1,2>
                  mov r6.xyz, r6.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r5.w, r6.xyzx, r5.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r6.w, r5.w, l(-5.554730)
                  add r6.w, r6.w, l(-6.983160)
                  mul r5.w, r5.w, r6.w  // ftimes<0:[-12.5379f,0f]>
                  mul r5.w, r5.w, l(1.000000)
                  exp r5.w, r5.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r8.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r5.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r8.xyz, r8.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r8.xyz, r8.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                  mov r9.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.w, r1.w  // roughness<0>
                
                #line 69
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r6.x, r9.xyzx, r6.xyzx
                  max r6.x, r6.x, l(0.000000)
                  min r6.x, r6.x, l(1.000000)  // nh<0:[0f,1f]>
                  mul r6.x, r6.x, r6.x  // nh2<0:[0f,1f]>
                  add r6.y, r6.w, l(-1.000000)
                  mul r6.x, r6.y, r6.x
                  add r6.x, r6.x, l(1.000000)  // g<0:NaN:Inf>
                  mul r6.x, r6.x, r6.x  // g2<0:NaN:Inf>
                  mul r6.x, r6.x, l(3.141593)
                  div r6.x, r6.w, r6.x  // ret<0:NaN:Inf>
                  mov r6.x, r6.x  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                  mov r6.yzw, r1.xxyz  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                  add r5.w, r5.w, l(1.000000)
                  mul r5.w, r5.w, r5.w
                  div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r5.xyz, r5.xyzx  // v<0,1,2>
                  mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                  dp3 r5.x, r9.xyzx, r5.xyzx
                  max r5.x, r5.x, l(0.000000)
                  min r5.x, r5.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r5.y, -r5.w
                  add r5.y, r5.y, l(1.000000)
                  mul r5.z, r5.y, r5.x
                  add r5.z, r5.w, r5.z
                  div r5.x, r5.x, r5.z  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r5.x, r5.x  // g1<0:NaN:Inf>
                  nop 
                  mov r6.yzw, r6.yyzw  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r5.z, r9.xyzx, r6.yzwy
                  max r5.z, r5.z, l(0.000000)
                  min r5.z, r5.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r5.y, r5.y, r5.z
                  add r5.y, r5.w, r5.y
                  div r5.y, r5.z, r5.y  // ret<0:NaN:Inf>
                  mov r5.y, r5.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r5.y, r5.y  // g2<0:NaN:Inf>
                  mul r5.x, r5.y, r5.x  // ret<0:NaN:Inf>
                  mov r5.x, r5.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r5.x, r5.x, r6.x
                  mul r5.xyz, r8.xyzx, r5.xxxx
                  mul r2.w, r2.w, l(4.000000)
                  mul r2.w, r4.w, r2.w
                  div r5.xyz, r5.xyzx, r2.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r4.xyz, r4.xyzx, r5.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r4.xyz, r4.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r4.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                mov r3.xyz, r3.xyzx  // SpecularColor<0,1,2>
                mov r1.w, r1.w  // Roughness<0>
                mov r0.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r1.xyz, r1.xyzx  // V<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 146
                mov r5.xyz, l(0,0,0,0)  // SpecularLighting<0: -0f,1: -0f,2: -0f>
                mov r2.w, l(0)  // i<0: 0u>
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r6.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r6.xyz, r6.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.xyz, r4.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r4.xyz, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r4.xyz, r4.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[2].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[3].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r4.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r5.w, l(0.000000), r4.w
                if_nz r5.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)
                  mul r6.xyz, r4.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r9.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r9.xyz, r9.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r9.xyz, r6.xyzx, r9.xyzx
                  add r9.xyz, r9.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r1.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r7.w, r6.w, l(-5.554730)
                  add r7.w, r7.w, l(-6.983160)
                  mul r6.w, r6.w, r7.w  // ftimes<0:[-12.5379f,0f]>
                  mul r6.w, r6.w, l(1.000000)
                  exp r6.w, r6.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r10.xyz, -r3.xyzx
                  add r10.xyz, r10.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r10.xyz, r6.wwww, r10.xyzx
                  add r10.xyz, r3.xyzx, r10.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r10.xyz, r10.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r10.xyz, r10.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r6.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r8.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r7.w, r7.w, r7.w  // nh2<0:[0f,1f]>
                  add r8.x, r6.w, l(-1.000000)
                  mul r7.w, r7.w, r8.x
                  add r7.w, r7.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r7.w, r7.w, r7.w  // g2<0:NaN:Inf>
                  mul r7.w, r7.w, l(3.141593)
                  div r6.w, r6.w, r7.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r7.w, r1.w, l(1.000000)
                  mul r7.w, r7.w, r7.w
                  div r7.w, r7.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r7.w, r7.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r7.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r7.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r11.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r11.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r7.y, r7.w, r7.y
                  div r7.y, r7.z, r7.y  // ret<0:NaN:Inf>
                  mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r7.y, r7.y  // g2<0:NaN:Inf>
                  mul r7.x, r7.y, r7.x  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r6.w, r6.w, r7.x
                  mul r7.xyz, r10.xyzx, r6.wwww
                  mul r4.w, r4.w, l(4.000000)
                  mul r4.w, r5.w, r4.w
                  div r7.xyz, r7.xyzx, r4.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r6.xyz, r6.xyzx, r9.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r6.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r7.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r8.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.w, r2.w  // uReverse<0>
                  mov r8.z, r2.w  // k<0>
                  loop 
                    ilt r8.w, r8.z, l(10)
                    breakc_z r8.w
                    ishl r8.w, r7.w, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r9.x, r6.w, l(1)
                    iadd r7.w, r8.w, r9.x  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r8.z, r8.z, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.w
                  mul r8.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r8.y, r8.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r8.x, r8.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r8.y, r8.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r8.xy, r8.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r9.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r8.x, r8.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r8.z, -r8.y
                  add r8.z, r8.z, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r8.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r8.z, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r8.y, r6.w, r6.w
                  mov r8.y, -r8.y
                  add r8.y, r8.y, l(1.000000)
                  sqrt r8.y, r8.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r8.z, r8.x
                  mul r8.z, r8.z, r8.y  // H<0:NaN>
                  sincos r8.x, null, r8.x
                  mul r8.x, r8.x, r8.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r8.y, -r9.z
                  max r8.y, r8.y, r9.z
                  lt r8.y, r8.y, l(0.999000)
                  movc r10.xyz, r8.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r11.xyz, r9.zxyz, r10.zxyz
                  mul r10.xyz, r9.yzxy, r10.xyzx
                  mov r10.xyz, -r10.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx
                  dp3 r8.y, r10.xyzx, r10.xyzx
                  rsq r8.y, r8.y
                  mul r10.xyz, r8.yyyy, r10.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r11.xyz, r9.yzxy, r10.zxyz
                  mul r12.xyz, r9.zxyz, r10.yzxy
                  mov r12.xyz, -r12.xyzx
                  add r11.xyz, r11.xyzx, r12.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r8.yzw, r8.zzzz, r10.xxyz
                  mul r10.xyz, r8.xxxx, r11.xyzx
                  add r8.xyz, r8.yzwy, r10.xyzx
                  mul r10.xyz, r6.wwww, r9.xyzx
                  add r8.xyz, r8.xyzx, r10.xyzx  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r8.xyz, r8.xyzx  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r8.xyzx
                  mul r8.w, r6.w, l(2.000000)
                  mul r10.xyz, r8.xyzx, r8.wwww
                  mov r11.xyz, -r1.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r10.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r8.x, r0.xyzx, r8.xyzx
                  max r8.x, r8.x, l(0.000000)
                  min r8.x, r8.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r8.y, l(0.000000), r9.w
                  if_nz r8.y
                    sample_l_indexable(texturecube)(float,float,float,float) r11.xyz, r10.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r10.xyz, r10.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r12.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r10.xyz, r10.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r8.y, r9.xyzx, r10.xyzx
                    max r8.y, r8.y, l(0.000000)
                    min r8.y, r8.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r8.z, -r5.w
                    add r8.z, r8.z, l(1.000000)
                    mul r9.w, r8.z, r8.y
                    add r9.w, r5.w, r9.w
                    div r8.y, r8.y, r9.w  // ret<0:NaN:Inf>
                    mov r8.y, r8.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r8.y, r8.y  // g1<0:NaN:Inf>
                    nop 
                    mov r12.xyz, r12.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r9.x, r9.xyzx, r12.xyzx
                    max r9.x, r9.x, l(0.000000)
                    min r9.x, r9.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r8.z, r8.z, r9.x
                    add r5.w, r5.w, r8.z
                    div r5.w, r9.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r8.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r8.y, -r6.w
                    add r8.y, r8.y, l(1.000000)
                    mul r8.z, r8.y, l(1.000000)
                    mul r8.y, r8.y, r8.y
                    mul r8.y, r8.y, r8.y
                    mul r8.y, r8.y, r8.z  // Fc<0:[0f,1f]>
                    mov r8.z, -r8.y
                    add r8.z, r8.z, l(1.000000)
                    mul r9.xyz, r3.xyzx, r8.zzzz
                    add r9.xyz, r8.yyyy, r9.xyzx  // F<0,1,2>
                    mul r9.xyz, r9.xyzx, r11.xyzx
                    mul r9.xyz, r5.wwww, r9.xyzx
                    mul r9.xyz, r6.wwww, r9.xyzx
                    mul r5.w, r8.w, r8.x
                    div r8.xyz, r9.xyzx, r5.wwww
                    add r7.xyz, r7.xyzx, r8.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r7.xyz, r7.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r7.xyz, r7.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r6.xyz, r6.xyzx, r7.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r6.xyz, r6.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r6.xyz, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r6.xyz, r6.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r4.xyz, r4.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                nop 
                mov r6.xyz, cb0[4].xyzx  // L<0,1,2>
                mov r7.xyz, cb0[5].xyzx  // L<4,5,6>
                
                #line 12
                mov r7.xyz, -r7.xyzx  // lightVec<0,1,2>
                
                #line 20
                nop 
                mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                mov r6.xyz, r6.xyzx  // lightcolor<0,1,2>
                
                #line 176 "Brdf.fx"
                dp3 r4.w, r7.xyzx, r0.xyzx  // diffuseFactor<0:NaN:Inf>
                lt r5.w, l(0.000000), r4.w
                if_nz r5.w
                  add r8.xyz, r1.xyzx, r7.xyzx
                  dp3 r5.w, r8.xyzx, r8.xyzx
                  rsq r5.w, r5.w
                  mul r8.xyz, r5.wwww, r8.xyzx  // halfv<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 182
                  mul r6.xyz, r6.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)
                  max r4.w, r4.w, l(0.000000)
                  min r4.w, r4.w, l(1.000000)
                  mul r6.xyz, r4.wwww, r6.xyzx  // incomecolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  nop 
                  mov r2.xyz, r2.xyzx  // cdiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 26
                  div r2.xyz, r2.xyzx, l(3.141593, 3.141593, 3.141593, 0.000000)  // LambertDiffuse<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 183
                  mul r2.xyz, r6.xyzx, r2.xyzx
                  add r2.xyz, r2.xyzx, l(0.000000, 0.000000, 0.000000, 0.000000)  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r5.w, r0.xyzx, r1.xyzx
                  max r5.w, r5.w, l(0.000000)
                  min r5.w, r5.w, l(1.000000)  // nv<0:[0f,1f]>
                  nop 
                  mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // lightdir<0,1,2>
                
                #line 50
                  dp3 r6.w, r8.xyzx, r7.xyzx
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // fvalue<0:[0f,1f]>
                  mul r7.w, r6.w, l(-5.554730)
                  add r7.w, r7.w, l(-6.983160)
                  mul r6.w, r6.w, r7.w  // ftimes<0:[-12.5379f,0f]>
                  mul r6.w, r6.w, l(1.000000)
                  exp r6.w, r6.w  // fvalue1<0:[0.000168159f,1f]>
                  mov r9.xyz, -r3.xyzx
                  add r9.xyz, r9.xyzx, l(1.000000, 1.000000, 1.000000, 0.000000)
                  mul r9.xyz, r6.wwww, r9.xyzx
                  add r9.xyz, r3.xyzx, r9.xyzx  // fret<0:Inf,1:Inf,2:Inf>
                  mov r9.xyz, r9.xyzx  // FresnelSpherical<0:Inf,1:Inf,2:Inf>
                
                #line 186
                  mov r9.xyz, r9.xyzx  // F<0:Inf,1:Inf,2:Inf>
                
                #line 192
                  nop 
                
                #line 69
                  mul r6.w, r1.w, r1.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r6.w, r6.w, r6.w  // a2<0:NaN:Inf>
                  dp3 r7.w, r0.xyzx, r8.xyzx
                  max r7.w, r7.w, l(0.000000)
                  min r7.w, r7.w, l(1.000000)  // nh<0:[0f,1f]>
                  mul r7.w, r7.w, r7.w  // nh2<0:[0f,1f]>
                  add r8.x, r6.w, l(-1.000000)
                  mul r7.w, r7.w, r8.x
                  add r7.w, r7.w, l(1.000000)  // g<0:NaN:Inf>
                  mul r7.w, r7.w, r7.w  // g2<0:NaN:Inf>
                  mul r7.w, r7.w, l(3.141593)
                  div r6.w, r6.w, r7.w  // ret<0:NaN:Inf>
                  mov r6.w, r6.w  // NDFGGX<0:NaN:Inf>
                
                #line 192
                  nop 
                
                #line 88
                  add r7.w, r1.w, l(1.000000)
                  mul r7.w, r7.w, r7.w
                  div r7.w, r7.w, l(8.000000)  // k<0:Inf>
                  nop 
                  mov r8.xyz, r0.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mov r7.xyz, r7.xyzx  // v<0,1,2>
                  mov r7.w, r7.w  // k<0:Inf>
                
                #line 81
                  dp3 r7.x, r8.xyzx, r7.xyzx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // nv<0:[0f,1f]>
                  mov r7.y, -r7.w
                  add r7.y, r7.y, l(1.000000)
                  mul r7.z, r7.y, r7.x
                  add r7.z, r7.w, r7.z
                  div r7.x, r7.x, r7.z  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                  mov r7.x, r7.x  // g1<0:NaN:Inf>
                  nop 
                  mov r10.xyz, r1.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                  dp3 r7.z, r8.xyzx, r10.xyzx
                  max r7.z, r7.z, l(0.000000)
                  min r7.z, r7.z, l(1.000000)  // nv<0:[0f,1f]>
                  mul r7.y, r7.y, r7.z
                  add r7.y, r7.w, r7.y
                  div r7.y, r7.z, r7.y  // ret<0:NaN:Inf>
                  mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                  mov r7.y, r7.y  // g2<0:NaN:Inf>
                  mul r7.x, r7.y, r7.x  // ret<0:NaN:Inf>
                  mov r7.x, r7.x  // GeoGGX<0:NaN:Inf>
                
                #line 192
                  mul r6.w, r6.w, r7.x
                  mul r7.xyz, r9.xyzx, r6.wwww
                  mul r4.w, r4.w, l(4.000000)
                  mul r4.w, r5.w, r4.w
                  div r7.xyz, r7.xyzx, r4.wwww  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r6.xyz, r6.xyzx, r7.xyzx  // specularcolor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  add r2.xyz, r2.xyzx, r6.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 177
                else 
                  mov r2.xyz, l(0,0,0,0)  // color<0: 0f,1: 0f,2: 0f>
                endif 
                
                #line 199
                nop 
                
                #line 148
                mov r6.xyz, r5.xyzx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r4.w, r2.w  // i<0>
                loop 
                  ult r5.w, r4.w, l(1024)
                  breakc_z r5.w
                  nop 
                  mov r5.w, r4.w  // i<0>
                
                #line 139
                  utof r6.w, r5.w
                  div r7.x, r6.w, l(1024.000000)  // Xi<0:[0f,4.1943e+006f]>
                  nop 
                  mov r5.w, r5.w  // i<0>
                
                #line 127
                  mov r6.w, r5.w  // i<0>
                  mov r7.z, r2.w  // uReverse<0>
                  mov r7.w, r2.w  // k<0>
                  loop 
                    ilt r8.x, r7.w, l(10)
                    breakc_z r8.x
                    ishl r8.x, r7.z, l(1)  // uReverse<0:[-2147483648,2147483646]>
                    and r8.y, r6.w, l(1)
                    iadd r7.z, r8.x, r8.y  // uReverse<0>
                    ushr r6.w, r6.w, l(1)  // i<0:[0u,2147483647u]>
                
                #line 127
                    iadd r7.w, r7.w, l(1)  // k<0>
                  endloop 
                
                #line 133
                  utof r5.w, r7.z
                  mul r7.y, r5.w, l(0.000978)  // ReverseBits32<0:[0f,4.1984e+006f]>
                
                #line 140
                  mov r7.y, r7.y  // Xi<1:[0f,4.1984e+006f]>
                  mov r7.x, r7.x  // Hammersley<0:[0f,4.1943e+006f]>
                  mov r7.y, r7.y  // Hammersley<1:[0f,4.1984e+006f]>
                
                #line 150
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  nop 
                  mov r7.xy, r7.xyxx  // Xi<0:[0f,4.1943e+006f],1:[0f,4.1984e+006f]>
                  mov r5.w, r1.w  // Roughness<0>
                  mov r8.xyz, r0.xyzx  // N<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 105
                  mul r6.w, r5.w, r5.w  // a<0:Inf:[0f,1.#INFf]>
                  mul r7.x, r7.x, l(6.283185)  // Phi<0:[0f,2.63536e+007f]>
                  mov r7.w, -r7.y
                  add r7.w, r7.w, l(1.000000)
                  mul r6.w, r6.w, r6.w
                  add r6.w, r6.w, l(-1.000000)
                  mul r6.w, r7.y, r6.w
                  add r6.w, r6.w, l(1.000000)
                  div r6.w, r7.w, r6.w
                  sqrt r6.w, r6.w  // CosTheta<0:NaN:Inf>
                  mul r7.y, r6.w, r6.w
                  mov r7.y, -r7.y
                  add r7.y, r7.y, l(1.000000)
                  sqrt r7.y, r7.y  // SinTheta<0:NaN>
                
                #line 112
                  sincos null, r7.w, r7.x
                  mul r7.w, r7.w, r7.y  // H<0:NaN>
                  sincos r7.x, null, r7.x
                  mul r7.x, r7.x, r7.y  // H<1:NaN>
                  mov r6.w, r6.w  // H<2:NaN:Inf>
                  mov r7.y, -r8.z
                  max r7.y, r7.y, r8.z
                  lt r7.y, r7.y, l(0.999000)
                  movc r9.xyz, r7.yyyy, l(1.000000,0,0,0), l(0,1.000000,0,0)  // UpVector<2:[-0f,1f],0:[-0f,1f],1: 0f>
                  mul r10.xyz, r8.zxyz, r9.zxyz
                  mul r9.xyz, r8.yzxy, r9.xyzx
                  mov r9.xyz, -r9.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx
                  dp3 r7.y, r9.xyzx, r9.xyzx
                  rsq r7.y, r7.y
                  mul r9.xyz, r7.yyyy, r9.xyzx  // TangentX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r10.xyz, r8.yzxy, r9.zxyz
                  mul r11.xyz, r8.zxyz, r9.yzxy
                  mov r11.xyz, -r11.xyzx
                  add r10.xyz, r10.xyzx, r11.xyzx  // TangentY<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  mul r9.xyz, r7.wwww, r9.xyzx
                  mul r7.xyw, r7.xxxx, r10.xyxz
                  add r7.xyw, r7.xyxw, r9.xyxz
                  mul r9.xyz, r6.wwww, r8.xyzx
                  add r7.xyw, r7.xyxw, r9.xyxz  // ImportanceSampleGGX<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 152
                  mov r7.xyw, r7.xyxw  // H<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r6.w, r1.xyzx, r7.xywx
                  mul r8.w, r6.w, l(2.000000)
                  mul r9.xyz, r7.xywx, r8.wwww
                  mov r10.xyz, -r1.xyzx
                  add r9.xyz, r9.xyzx, r10.xyzx  // L<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                  dp3 r8.w, r0.xyzx, r1.xyzx
                  max r8.w, r8.w, l(0.000000)
                  min r8.w, r8.w, l(1.000000)  // NoV<0:[0f,1f]>
                  dp3 r9.w, r0.xyzx, r9.xyzx
                  max r9.w, r9.w, l(0.000000)
                  min r9.w, r9.w, l(1.000000)  // NoL<0:[0f,1f]>
                  dp3 r7.x, r0.xyzx, r7.xywx
                  max r7.x, r7.x, l(0.000000)
                  min r7.x, r7.x, l(1.000000)  // NoH<0:[0f,1f]>
                  max r6.w, r6.w, l(0.000000)
                  min r6.w, r6.w, l(1.000000)  // VoH<0:[0f,1f]>
                  lt r7.y, l(0.000000), r9.w
                  if_nz r7.y
                    sample_l_indexable(texturecube)(float,float,float,float) r10.xyz, r9.xyzx, t0.xyzw, s0, l(0.000000)  // SampleColor<0:Inf,1:Inf,2:Inf>
                    nop 
                    mov r9.xyz, r9.xyzx  // lightdir<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r11.xyz, r1.xyzx  // view<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 88
                    add r5.w, r5.w, l(1.000000)
                    mul r5.w, r5.w, r5.w
                    div r5.w, r5.w, l(8.000000)  // k<0:Inf>
                    nop 
                    mov r8.xyz, r8.xyzx  // normal<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r9.xyz, r9.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                    mov r5.w, r5.w  // k<0:Inf>
                
                #line 81
                    dp3 r7.y, r8.xyzx, r9.xyzx
                    max r7.y, r7.y, l(0.000000)
                    min r7.y, r7.y, l(1.000000)  // nv<0:[0f,1f]>
                    mov r7.w, -r5.w
                    add r7.w, r7.w, l(1.000000)
                    mul r9.x, r7.w, r7.y
                    add r9.x, r5.w, r9.x
                    div r7.y, r7.y, r9.x  // ret<0:NaN:Inf>
                    mov r7.y, r7.y  // Geo1GGX<0:NaN:Inf>
                
                #line 89
                    mov r7.y, r7.y  // g1<0:NaN:Inf>
                    nop 
                    mov r11.xyz, r11.xyzx  // v<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 81
                    dp3 r8.x, r8.xyzx, r11.xyzx
                    max r8.x, r8.x, l(0.000000)
                    min r8.x, r8.x, l(1.000000)  // nv<0:[0f,1f]>
                    mul r7.w, r7.w, r8.x
                    add r5.w, r5.w, r7.w
                    div r5.w, r8.x, r5.w  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // Geo1GGX<0:NaN:Inf>
                
                #line 90
                    mov r5.w, r5.w  // g2<0:NaN:Inf>
                    mul r5.w, r5.w, r7.y  // ret<0:NaN:Inf>
                    mov r5.w, r5.w  // GeoGGX<0:NaN:Inf>
                
                #line 162
                    mov r5.w, r5.w  // G<0:NaN:Inf>
                    mov r7.y, -r6.w
                    add r7.y, r7.y, l(1.000000)
                    mul r7.w, r7.y, l(1.000000)
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.y
                    mul r7.y, r7.y, r7.w  // Fc<0:[0f,1f]>
                    mov r7.w, -r7.y
                    add r7.w, r7.w, l(1.000000)
                    mul r8.xyz, r3.xyzx, r7.wwww
                    add r8.xyz, r7.yyyy, r8.xyzx  // F<0,1,2>
                    mul r8.xyz, r8.xyzx, r10.xyzx
                    mul r8.xyz, r5.wwww, r8.xyzx
                    mul r8.xyz, r6.wwww, r8.xyzx
                    mul r5.w, r8.w, r7.x
                    div r7.xyw, r8.xyxz, r5.wwww
                    add r6.xyz, r6.xyzx, r7.xywx  // SpecularLighting<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 159
                  endif 
                
                #line 148
                  iadd r4.w, r4.w, l(1)  // i<0>
                endloop 
                
                #line 169
                div r0.xyz, r6.xyzx, l(1024.000000, 1024.000000, 1024.000000, 0.000000)  // SpecularIBL<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 199
                mov r0.xyz, r0.xyzx  // environmentSpe<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 202
                add r0.xyz, r0.xyzx, r2.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov r0.xyz, r0.xyzx  // PBRColor<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 20 "E:\D3DCode\PhysicalBasedRenderring\PhysicalBasedRenderring\fx\CommonPass.fx"
                mov r0.xyz, r0.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 233
                mov r0.xyz, r0.xyzx  // color1<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 236
                add r0.xyz, r0.xyzx, r4.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 246
                mov r1.x, -cb0[6].w
                add r0.w, r0.w, r1.x
                div r0.w, r0.w, cb0[7].x
                max r0.w, r0.w, l(0.000000)
                min r0.w, r0.w, l(1.000000)  // fogLerp<0:[0f,1f]>
                
                #line 249
                mov r1.xyz, -r0.xyzx
                add r1.xyz, r1.xyzx, cb0[8].xyzx
                mul r1.xyz, r0.wwww, r1.xyzx
                add r0.xyz, r0.xyzx, r1.xyzx  // color<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                
                #line 253
                mul r0.w, r3.w, cb1[16].w  // color<3:NaN:Inf>
                
                #line 257
                mov o0.xyz, r0.xyzx  // PS<0:NaN:Inf,1:NaN:Inf,2:NaN:Inf>
                mov o0.w, r0.w  // PS<3:NaN:Inf>
                ret 
                // Approximately 795 instruction slots used
                            
            };
        }

    }

}

